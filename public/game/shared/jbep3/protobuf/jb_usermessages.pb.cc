// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jb_usermessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "jb_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CUsrMsg_VGUIMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VGUIMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_VGUIMenu_Subkey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VGUIMenu_Subkey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_Geiger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_Geiger_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_Train_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_Train_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_HudText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_HudText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_SayText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_SayText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_SayText2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_SayText2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_TextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_TextMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_HudMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_HudMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_Shake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_Shake_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_Fade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_Fade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_Rumble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_Rumble_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_CloseCaption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_CloseCaption_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_CloseCaptionDirect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_CloseCaptionDirect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_VoiceMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VoiceMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_VoiceMask_PlayerMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VoiceMask_PlayerMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_HintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_HintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_KeyHintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_KeyHintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_DesiredTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_DesiredTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_CurrentTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_CurrentTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_AchievementEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_AchievementEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_PlayerStatsUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_PlayerStatsUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_PlayerStatsUpdate_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_PlayerStatsUpdate_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_CallVoteFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_CallVoteFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_VoteStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VoteStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_VotePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VotePass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_VoteFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VoteFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_VoteSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_VoteSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_SendLastKillerDamageToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_SendLastKillerDamageToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_ShowMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_ShowMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_GlowPropTurnOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_GlowPropTurnOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_BreakModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_BreakModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_ExtVote_Option_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_ExtVote_Option_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_ExtVoteStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_ExtVoteStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_ExtVoteUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_ExtVoteUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_ShowRoundIntro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_ShowRoundIntro_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_DeathNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_DeathNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_PlayerSpree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_PlayerSpree_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_SVTUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_SVTUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CJBUsrMsg_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CJBUsrMsg_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_ResetHud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_ResetHud_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_GameTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_GameTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_RequestState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_RequestState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUsrMsg_ClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUsrMsg_ClientInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EJBUserMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_jb_5fusermessages_2eproto() {
  protobuf_AddDesc_jb_5fusermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "jb_usermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CUsrMsg_VGUIMenu_descriptor_ = file->message_type(0);
  static const int CUsrMsg_VGUIMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu, subkeys_),
  };
  CUsrMsg_VGUIMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VGUIMenu_descriptor_,
      CUsrMsg_VGUIMenu::default_instance_,
      CUsrMsg_VGUIMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VGUIMenu));
  CUsrMsg_VGUIMenu_Subkey_descriptor_ = CUsrMsg_VGUIMenu_descriptor_->nested_type(0);
  static const int CUsrMsg_VGUIMenu_Subkey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu_Subkey, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu_Subkey, str_),
  };
  CUsrMsg_VGUIMenu_Subkey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VGUIMenu_Subkey_descriptor_,
      CUsrMsg_VGUIMenu_Subkey::default_instance_,
      CUsrMsg_VGUIMenu_Subkey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu_Subkey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VGUIMenu_Subkey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VGUIMenu_Subkey));
  CUsrMsg_Geiger_descriptor_ = file->message_type(1);
  static const int CUsrMsg_Geiger_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Geiger, range_),
  };
  CUsrMsg_Geiger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_Geiger_descriptor_,
      CUsrMsg_Geiger::default_instance_,
      CUsrMsg_Geiger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Geiger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Geiger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_Geiger));
  CUsrMsg_Train_descriptor_ = file->message_type(2);
  static const int CUsrMsg_Train_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Train, train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Train, train_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Train, is_active_),
  };
  CUsrMsg_Train_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_Train_descriptor_,
      CUsrMsg_Train::default_instance_,
      CUsrMsg_Train_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Train, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Train, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_Train));
  CUsrMsg_HudText_descriptor_ = file->message_type(3);
  static const int CUsrMsg_HudText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudText, text_),
  };
  CUsrMsg_HudText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_HudText_descriptor_,
      CUsrMsg_HudText::default_instance_,
      CUsrMsg_HudText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_HudText));
  CUsrMsg_SayText_descriptor_ = file->message_type(4);
  static const int CUsrMsg_SayText_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText, textallchat_),
  };
  CUsrMsg_SayText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_SayText_descriptor_,
      CUsrMsg_SayText::default_instance_,
      CUsrMsg_SayText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_SayText));
  CUsrMsg_SayText2_descriptor_ = file->message_type(5);
  static const int CUsrMsg_SayText2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText2, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText2, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText2, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText2, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText2, textallchat_),
  };
  CUsrMsg_SayText2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_SayText2_descriptor_,
      CUsrMsg_SayText2::default_instance_,
      CUsrMsg_SayText2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SayText2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_SayText2));
  CUsrMsg_TextMsg_descriptor_ = file->message_type(6);
  static const int CUsrMsg_TextMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_TextMsg, msg_dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_TextMsg, params_),
  };
  CUsrMsg_TextMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_TextMsg_descriptor_,
      CUsrMsg_TextMsg::default_instance_,
      CUsrMsg_TextMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_TextMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_TextMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_TextMsg));
  CUsrMsg_HudMsg_descriptor_ = file->message_type(7);
  static const int CUsrMsg_HudMsg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, clr1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, clr2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, fade_in_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, fade_out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, fx_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, text_),
  };
  CUsrMsg_HudMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_HudMsg_descriptor_,
      CUsrMsg_HudMsg::default_instance_,
      CUsrMsg_HudMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HudMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_HudMsg));
  CUsrMsg_Shake_descriptor_ = file->message_type(8);
  static const int CUsrMsg_Shake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Shake, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Shake, local_amplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Shake, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Shake, duration_),
  };
  CUsrMsg_Shake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_Shake_descriptor_,
      CUsrMsg_Shake::default_instance_,
      CUsrMsg_Shake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Shake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Shake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_Shake));
  CUsrMsg_Fade_descriptor_ = file->message_type(9);
  static const int CUsrMsg_Fade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Fade, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Fade, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Fade, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Fade, clr_),
  };
  CUsrMsg_Fade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_Fade_descriptor_,
      CUsrMsg_Fade::default_instance_,
      CUsrMsg_Fade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Fade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Fade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_Fade));
  CUsrMsg_Rumble_descriptor_ = file->message_type(10);
  static const int CUsrMsg_Rumble_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Rumble, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Rumble, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Rumble, flags_),
  };
  CUsrMsg_Rumble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_Rumble_descriptor_,
      CUsrMsg_Rumble::default_instance_,
      CUsrMsg_Rumble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Rumble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Rumble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_Rumble));
  CUsrMsg_CloseCaption_descriptor_ = file->message_type(11);
  static const int CUsrMsg_CloseCaption_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaption, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaption, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaption, from_player_),
  };
  CUsrMsg_CloseCaption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_CloseCaption_descriptor_,
      CUsrMsg_CloseCaption::default_instance_,
      CUsrMsg_CloseCaption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_CloseCaption));
  CUsrMsg_CloseCaptionDirect_descriptor_ = file->message_type(12);
  static const int CUsrMsg_CloseCaptionDirect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaptionDirect, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaptionDirect, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaptionDirect, from_player_),
  };
  CUsrMsg_CloseCaptionDirect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_CloseCaptionDirect_descriptor_,
      CUsrMsg_CloseCaptionDirect::default_instance_,
      CUsrMsg_CloseCaptionDirect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaptionDirect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CloseCaptionDirect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_CloseCaptionDirect));
  CUsrMsg_VoiceMask_descriptor_ = file->message_type(13);
  static const int CUsrMsg_VoiceMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask, player_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask, player_mod_enable_),
  };
  CUsrMsg_VoiceMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VoiceMask_descriptor_,
      CUsrMsg_VoiceMask::default_instance_,
      CUsrMsg_VoiceMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VoiceMask));
  CUsrMsg_VoiceMask_PlayerMask_descriptor_ = CUsrMsg_VoiceMask_descriptor_->nested_type(0);
  static const int CUsrMsg_VoiceMask_PlayerMask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask_PlayerMask, game_rules_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask_PlayerMask, ban_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask_PlayerMask, proximity_mask_),
  };
  CUsrMsg_VoiceMask_PlayerMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VoiceMask_PlayerMask_descriptor_,
      CUsrMsg_VoiceMask_PlayerMask::default_instance_,
      CUsrMsg_VoiceMask_PlayerMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask_PlayerMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoiceMask_PlayerMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VoiceMask_PlayerMask));
  CUsrMsg_HintText_descriptor_ = file->message_type(14);
  static const int CUsrMsg_HintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HintText, text_),
  };
  CUsrMsg_HintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_HintText_descriptor_,
      CUsrMsg_HintText::default_instance_,
      CUsrMsg_HintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_HintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_HintText));
  CUsrMsg_KeyHintText_descriptor_ = file->message_type(15);
  static const int CUsrMsg_KeyHintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_KeyHintText, hints_),
  };
  CUsrMsg_KeyHintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_KeyHintText_descriptor_,
      CUsrMsg_KeyHintText::default_instance_,
      CUsrMsg_KeyHintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_KeyHintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_KeyHintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_KeyHintText));
  CUsrMsg_DesiredTimescale_descriptor_ = file->message_type(16);
  static const int CUsrMsg_DesiredTimescale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_DesiredTimescale, desired_timescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_DesiredTimescale, duration_realtime_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_DesiredTimescale, interpolator_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_DesiredTimescale, start_blend_time_),
  };
  CUsrMsg_DesiredTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_DesiredTimescale_descriptor_,
      CUsrMsg_DesiredTimescale::default_instance_,
      CUsrMsg_DesiredTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_DesiredTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_DesiredTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_DesiredTimescale));
  CUsrMsg_CurrentTimescale_descriptor_ = file->message_type(17);
  static const int CUsrMsg_CurrentTimescale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CurrentTimescale, cur_timescale_),
  };
  CUsrMsg_CurrentTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_CurrentTimescale_descriptor_,
      CUsrMsg_CurrentTimescale::default_instance_,
      CUsrMsg_CurrentTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CurrentTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CurrentTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_CurrentTimescale));
  CUsrMsg_AchievementEvent_descriptor_ = file->message_type(18);
  static const int CUsrMsg_AchievementEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_AchievementEvent, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_AchievementEvent, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_AchievementEvent, user_id_),
  };
  CUsrMsg_AchievementEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_AchievementEvent_descriptor_,
      CUsrMsg_AchievementEvent::default_instance_,
      CUsrMsg_AchievementEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_AchievementEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_AchievementEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_AchievementEvent));
  CUsrMsg_PlayerStatsUpdate_descriptor_ = file->message_type(19);
  static const int CUsrMsg_PlayerStatsUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate, crc_),
  };
  CUsrMsg_PlayerStatsUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_PlayerStatsUpdate_descriptor_,
      CUsrMsg_PlayerStatsUpdate::default_instance_,
      CUsrMsg_PlayerStatsUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_PlayerStatsUpdate));
  CUsrMsg_PlayerStatsUpdate_Stat_descriptor_ = CUsrMsg_PlayerStatsUpdate_descriptor_->nested_type(0);
  static const int CUsrMsg_PlayerStatsUpdate_Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate_Stat, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate_Stat, delta_),
  };
  CUsrMsg_PlayerStatsUpdate_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_PlayerStatsUpdate_Stat_descriptor_,
      CUsrMsg_PlayerStatsUpdate_Stat::default_instance_,
      CUsrMsg_PlayerStatsUpdate_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_PlayerStatsUpdate_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_PlayerStatsUpdate_Stat));
  CUsrMsg_CallVoteFailed_descriptor_ = file->message_type(20);
  static const int CUsrMsg_CallVoteFailed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CallVoteFailed, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CallVoteFailed, time_),
  };
  CUsrMsg_CallVoteFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_CallVoteFailed_descriptor_,
      CUsrMsg_CallVoteFailed::default_instance_,
      CUsrMsg_CallVoteFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CallVoteFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_CallVoteFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_CallVoteFailed));
  CUsrMsg_VoteStart_descriptor_ = file->message_type(21);
  static const int CUsrMsg_VoteStart_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, ent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, vote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, disp_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, details_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, other_team_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, is_yes_no_vote_),
  };
  CUsrMsg_VoteStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VoteStart_descriptor_,
      CUsrMsg_VoteStart::default_instance_,
      CUsrMsg_VoteStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VoteStart));
  CUsrMsg_VotePass_descriptor_ = file->message_type(22);
  static const int CUsrMsg_VotePass_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VotePass, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VotePass, vote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VotePass, disp_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VotePass, details_str_),
  };
  CUsrMsg_VotePass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VotePass_descriptor_,
      CUsrMsg_VotePass::default_instance_,
      CUsrMsg_VotePass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VotePass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VotePass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VotePass));
  CUsrMsg_VoteFailed_descriptor_ = file->message_type(23);
  static const int CUsrMsg_VoteFailed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteFailed, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteFailed, reason_),
  };
  CUsrMsg_VoteFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VoteFailed_descriptor_,
      CUsrMsg_VoteFailed::default_instance_,
      CUsrMsg_VoteFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VoteFailed));
  CUsrMsg_VoteSetup_descriptor_ = file->message_type(24);
  static const int CUsrMsg_VoteSetup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteSetup, potential_issues_),
  };
  CUsrMsg_VoteSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_VoteSetup_descriptor_,
      CUsrMsg_VoteSetup::default_instance_,
      CUsrMsg_VoteSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_VoteSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_VoteSetup));
  CUsrMsg_SendLastKillerDamageToClient_descriptor_ = file->message_type(25);
  static const int CUsrMsg_SendLastKillerDamageToClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SendLastKillerDamageToClient, num_hits_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SendLastKillerDamageToClient, damage_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SendLastKillerDamageToClient, num_hits_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SendLastKillerDamageToClient, damage_taken_),
  };
  CUsrMsg_SendLastKillerDamageToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_SendLastKillerDamageToClient_descriptor_,
      CUsrMsg_SendLastKillerDamageToClient::default_instance_,
      CUsrMsg_SendLastKillerDamageToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SendLastKillerDamageToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_SendLastKillerDamageToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_SendLastKillerDamageToClient));
  CUsrMsg_ShowMenu_descriptor_ = file->message_type(26);
  static const int CUsrMsg_ShowMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ShowMenu, bits_valid_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ShowMenu, display_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ShowMenu, menu_string_),
  };
  CUsrMsg_ShowMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_ShowMenu_descriptor_,
      CUsrMsg_ShowMenu::default_instance_,
      CUsrMsg_ShowMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ShowMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ShowMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_ShowMenu));
  CUsrMsg_GlowPropTurnOff_descriptor_ = file->message_type(27);
  static const int CUsrMsg_GlowPropTurnOff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_GlowPropTurnOff, entidx_),
  };
  CUsrMsg_GlowPropTurnOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_GlowPropTurnOff_descriptor_,
      CUsrMsg_GlowPropTurnOff::default_instance_,
      CUsrMsg_GlowPropTurnOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_GlowPropTurnOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_GlowPropTurnOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_GlowPropTurnOff));
  CUsrMsg_BreakModel_descriptor_ = file->message_type(28);
  static const int CUsrMsg_BreakModel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_BreakModel, break_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_BreakModel, model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_BreakModel, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_BreakModel, angles_),
  };
  CUsrMsg_BreakModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_BreakModel_descriptor_,
      CUsrMsg_BreakModel::default_instance_,
      CUsrMsg_BreakModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_BreakModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_BreakModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_BreakModel));
  CUsrMsg_Damage_descriptor_ = file->message_type(29);
  static const int CUsrMsg_Damage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Damage, dmg_saved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Damage, dmg_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Damage, dmg_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Damage, dmg_origin_),
  };
  CUsrMsg_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_Damage_descriptor_,
      CUsrMsg_Damage::default_instance_,
      CUsrMsg_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_Damage));
  CJBUsrMsg_ExtVote_Option_descriptor_ = file->message_type(30);
  static const int CJBUsrMsg_ExtVote_Option_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVote_Option, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVote_Option, votes_),
  };
  CJBUsrMsg_ExtVote_Option_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_ExtVote_Option_descriptor_,
      CJBUsrMsg_ExtVote_Option::default_instance_,
      CJBUsrMsg_ExtVote_Option_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVote_Option, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVote_Option, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_ExtVote_Option));
  CJBUsrMsg_ExtVoteStateChange_descriptor_ = file->message_type(31);
  static const int CJBUsrMsg_ExtVoteStateChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteStateChange, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteStateChange, time_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteStateChange, options_),
  };
  CJBUsrMsg_ExtVoteStateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_ExtVoteStateChange_descriptor_,
      CJBUsrMsg_ExtVoteStateChange::default_instance_,
      CJBUsrMsg_ExtVoteStateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteStateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteStateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_ExtVoteStateChange));
  CJBUsrMsg_ExtVoteUpdate_descriptor_ = file->message_type(32);
  static const int CJBUsrMsg_ExtVoteUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteUpdate, option_),
  };
  CJBUsrMsg_ExtVoteUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_ExtVoteUpdate_descriptor_,
      CJBUsrMsg_ExtVoteUpdate::default_instance_,
      CJBUsrMsg_ExtVoteUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ExtVoteUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_ExtVoteUpdate));
  CJBUsrMsg_ShowRoundIntro_descriptor_ = file->message_type(33);
  static const int CJBUsrMsg_ShowRoundIntro_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, team_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, text_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, model1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, model2_),
  };
  CJBUsrMsg_ShowRoundIntro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_ShowRoundIntro_descriptor_,
      CJBUsrMsg_ShowRoundIntro::default_instance_,
      CJBUsrMsg_ShowRoundIntro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_ShowRoundIntro));
  CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_descriptor_ = CJBUsrMsg_ShowRoundIntro_descriptor_->nested_type(0);
  static const int CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro_CRoundIntroModel, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro_CRoundIntroModel, anim_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro_CRoundIntroModel, weapon_model_),
  };
  CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_descriptor_,
      CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance_,
      CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro_CRoundIntroModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_ShowRoundIntro_CRoundIntroModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_ShowRoundIntro_CRoundIntroModel));
  CJBUsrMsg_DeathNotice_descriptor_ = file->message_type(34);
  static const int CJBUsrMsg_DeathNotice_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, victim_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, scorer_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, assister_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, killer_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, damage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, custom_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, body_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, credit_assister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, victim_teamnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, killer_teamnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, assister_teamnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, killer_cname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, assister_cname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, victim_cname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, kill_streak_),
  };
  CJBUsrMsg_DeathNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_DeathNotice_descriptor_,
      CJBUsrMsg_DeathNotice::default_instance_,
      CJBUsrMsg_DeathNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_DeathNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_DeathNotice));
  CJBUsrMsg_PlayerSpree_descriptor_ = file->message_type(35);
  static const int CJBUsrMsg_PlayerSpree_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_PlayerSpree, player_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_PlayerSpree, streak_),
  };
  CJBUsrMsg_PlayerSpree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_PlayerSpree_descriptor_,
      CJBUsrMsg_PlayerSpree::default_instance_,
      CJBUsrMsg_PlayerSpree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_PlayerSpree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_PlayerSpree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_PlayerSpree));
  CJBUsrMsg_SVTUpdate_descriptor_ = file->message_type(36);
  static const int CJBUsrMsg_SVTUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, alert_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, alert_time_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, alert_time_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, last_alert_state_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, last_backup_dispatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, terrorists_on_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, sneaks_on_start_),
  };
  CJBUsrMsg_SVTUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_SVTUpdate_descriptor_,
      CJBUsrMsg_SVTUpdate::default_instance_,
      CJBUsrMsg_SVTUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_SVTUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_SVTUpdate));
  CJBUsrMsg_Damage_descriptor_ = file->message_type(37);
  static const int CJBUsrMsg_Damage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, victim_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, attacker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, is_combatant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, dmg_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, dmg_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, dmg_custom_),
  };
  CJBUsrMsg_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CJBUsrMsg_Damage_descriptor_,
      CJBUsrMsg_Damage::default_instance_,
      CJBUsrMsg_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CJBUsrMsg_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CJBUsrMsg_Damage));
  CUsrMsg_ResetHud_descriptor_ = file->message_type(38);
  static const int CUsrMsg_ResetHud_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ResetHud, reset_),
  };
  CUsrMsg_ResetHud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_ResetHud_descriptor_,
      CUsrMsg_ResetHud::default_instance_,
      CUsrMsg_ResetHud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ResetHud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ResetHud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_ResetHud));
  CUsrMsg_GameTitle_descriptor_ = file->message_type(39);
  static const int CUsrMsg_GameTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_GameTitle, dummy_),
  };
  CUsrMsg_GameTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_GameTitle_descriptor_,
      CUsrMsg_GameTitle::default_instance_,
      CUsrMsg_GameTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_GameTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_GameTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_GameTitle));
  CUsrMsg_RequestState_descriptor_ = file->message_type(40);
  static const int CUsrMsg_RequestState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_RequestState, dummy_),
  };
  CUsrMsg_RequestState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_RequestState_descriptor_,
      CUsrMsg_RequestState::default_instance_,
      CUsrMsg_RequestState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_RequestState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_RequestState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_RequestState));
  CUsrMsg_ClientInfo_descriptor_ = file->message_type(41);
  static const int CUsrMsg_ClientInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ClientInfo, dummy_),
  };
  CUsrMsg_ClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUsrMsg_ClientInfo_descriptor_,
      CUsrMsg_ClientInfo::default_instance_,
      CUsrMsg_ClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUsrMsg_ClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUsrMsg_ClientInfo));
  EJBUserMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_jb_5fusermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VGUIMenu_descriptor_, &CUsrMsg_VGUIMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VGUIMenu_Subkey_descriptor_, &CUsrMsg_VGUIMenu_Subkey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_Geiger_descriptor_, &CUsrMsg_Geiger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_Train_descriptor_, &CUsrMsg_Train::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_HudText_descriptor_, &CUsrMsg_HudText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_SayText_descriptor_, &CUsrMsg_SayText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_SayText2_descriptor_, &CUsrMsg_SayText2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_TextMsg_descriptor_, &CUsrMsg_TextMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_HudMsg_descriptor_, &CUsrMsg_HudMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_Shake_descriptor_, &CUsrMsg_Shake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_Fade_descriptor_, &CUsrMsg_Fade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_Rumble_descriptor_, &CUsrMsg_Rumble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_CloseCaption_descriptor_, &CUsrMsg_CloseCaption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_CloseCaptionDirect_descriptor_, &CUsrMsg_CloseCaptionDirect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VoiceMask_descriptor_, &CUsrMsg_VoiceMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VoiceMask_PlayerMask_descriptor_, &CUsrMsg_VoiceMask_PlayerMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_HintText_descriptor_, &CUsrMsg_HintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_KeyHintText_descriptor_, &CUsrMsg_KeyHintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_DesiredTimescale_descriptor_, &CUsrMsg_DesiredTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_CurrentTimescale_descriptor_, &CUsrMsg_CurrentTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_AchievementEvent_descriptor_, &CUsrMsg_AchievementEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_PlayerStatsUpdate_descriptor_, &CUsrMsg_PlayerStatsUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_PlayerStatsUpdate_Stat_descriptor_, &CUsrMsg_PlayerStatsUpdate_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_CallVoteFailed_descriptor_, &CUsrMsg_CallVoteFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VoteStart_descriptor_, &CUsrMsg_VoteStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VotePass_descriptor_, &CUsrMsg_VotePass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VoteFailed_descriptor_, &CUsrMsg_VoteFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_VoteSetup_descriptor_, &CUsrMsg_VoteSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_SendLastKillerDamageToClient_descriptor_, &CUsrMsg_SendLastKillerDamageToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_ShowMenu_descriptor_, &CUsrMsg_ShowMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_GlowPropTurnOff_descriptor_, &CUsrMsg_GlowPropTurnOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_BreakModel_descriptor_, &CUsrMsg_BreakModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_Damage_descriptor_, &CUsrMsg_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_ExtVote_Option_descriptor_, &CJBUsrMsg_ExtVote_Option::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_ExtVoteStateChange_descriptor_, &CJBUsrMsg_ExtVoteStateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_ExtVoteUpdate_descriptor_, &CJBUsrMsg_ExtVoteUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_ShowRoundIntro_descriptor_, &CJBUsrMsg_ShowRoundIntro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_descriptor_, &CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_DeathNotice_descriptor_, &CJBUsrMsg_DeathNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_PlayerSpree_descriptor_, &CJBUsrMsg_PlayerSpree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_SVTUpdate_descriptor_, &CJBUsrMsg_SVTUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CJBUsrMsg_Damage_descriptor_, &CJBUsrMsg_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_ResetHud_descriptor_, &CUsrMsg_ResetHud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_GameTitle_descriptor_, &CUsrMsg_GameTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_RequestState_descriptor_, &CUsrMsg_RequestState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUsrMsg_ClientInfo_descriptor_, &CUsrMsg_ClientInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_jb_5fusermessages_2eproto() {
  delete CUsrMsg_VGUIMenu::default_instance_;
  delete CUsrMsg_VGUIMenu_reflection_;
  delete CUsrMsg_VGUIMenu_Subkey::default_instance_;
  delete CUsrMsg_VGUIMenu_Subkey_reflection_;
  delete CUsrMsg_Geiger::default_instance_;
  delete CUsrMsg_Geiger_reflection_;
  delete CUsrMsg_Train::default_instance_;
  delete CUsrMsg_Train_reflection_;
  delete CUsrMsg_HudText::default_instance_;
  delete CUsrMsg_HudText_reflection_;
  delete CUsrMsg_SayText::default_instance_;
  delete CUsrMsg_SayText_reflection_;
  delete CUsrMsg_SayText2::default_instance_;
  delete CUsrMsg_SayText2_reflection_;
  delete CUsrMsg_TextMsg::default_instance_;
  delete CUsrMsg_TextMsg_reflection_;
  delete CUsrMsg_HudMsg::default_instance_;
  delete CUsrMsg_HudMsg_reflection_;
  delete CUsrMsg_Shake::default_instance_;
  delete CUsrMsg_Shake_reflection_;
  delete CUsrMsg_Fade::default_instance_;
  delete CUsrMsg_Fade_reflection_;
  delete CUsrMsg_Rumble::default_instance_;
  delete CUsrMsg_Rumble_reflection_;
  delete CUsrMsg_CloseCaption::default_instance_;
  delete CUsrMsg_CloseCaption_reflection_;
  delete CUsrMsg_CloseCaptionDirect::default_instance_;
  delete CUsrMsg_CloseCaptionDirect_reflection_;
  delete CUsrMsg_VoiceMask::default_instance_;
  delete CUsrMsg_VoiceMask_reflection_;
  delete CUsrMsg_VoiceMask_PlayerMask::default_instance_;
  delete CUsrMsg_VoiceMask_PlayerMask_reflection_;
  delete CUsrMsg_HintText::default_instance_;
  delete CUsrMsg_HintText_reflection_;
  delete CUsrMsg_KeyHintText::default_instance_;
  delete CUsrMsg_KeyHintText_reflection_;
  delete CUsrMsg_DesiredTimescale::default_instance_;
  delete CUsrMsg_DesiredTimescale_reflection_;
  delete CUsrMsg_CurrentTimescale::default_instance_;
  delete CUsrMsg_CurrentTimescale_reflection_;
  delete CUsrMsg_AchievementEvent::default_instance_;
  delete CUsrMsg_AchievementEvent_reflection_;
  delete CUsrMsg_PlayerStatsUpdate::default_instance_;
  delete CUsrMsg_PlayerStatsUpdate_reflection_;
  delete CUsrMsg_PlayerStatsUpdate_Stat::default_instance_;
  delete CUsrMsg_PlayerStatsUpdate_Stat_reflection_;
  delete CUsrMsg_CallVoteFailed::default_instance_;
  delete CUsrMsg_CallVoteFailed_reflection_;
  delete CUsrMsg_VoteStart::default_instance_;
  delete CUsrMsg_VoteStart_reflection_;
  delete CUsrMsg_VotePass::default_instance_;
  delete CUsrMsg_VotePass_reflection_;
  delete CUsrMsg_VoteFailed::default_instance_;
  delete CUsrMsg_VoteFailed_reflection_;
  delete CUsrMsg_VoteSetup::default_instance_;
  delete CUsrMsg_VoteSetup_reflection_;
  delete CUsrMsg_SendLastKillerDamageToClient::default_instance_;
  delete CUsrMsg_SendLastKillerDamageToClient_reflection_;
  delete CUsrMsg_ShowMenu::default_instance_;
  delete CUsrMsg_ShowMenu_reflection_;
  delete CUsrMsg_GlowPropTurnOff::default_instance_;
  delete CUsrMsg_GlowPropTurnOff_reflection_;
  delete CUsrMsg_BreakModel::default_instance_;
  delete CUsrMsg_BreakModel_reflection_;
  delete CUsrMsg_Damage::default_instance_;
  delete CUsrMsg_Damage_reflection_;
  delete CJBUsrMsg_ExtVote_Option::default_instance_;
  delete CJBUsrMsg_ExtVote_Option_reflection_;
  delete CJBUsrMsg_ExtVoteStateChange::default_instance_;
  delete CJBUsrMsg_ExtVoteStateChange_reflection_;
  delete CJBUsrMsg_ExtVoteUpdate::default_instance_;
  delete CJBUsrMsg_ExtVoteUpdate_reflection_;
  delete CJBUsrMsg_ShowRoundIntro::default_instance_;
  delete CJBUsrMsg_ShowRoundIntro_reflection_;
  delete CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance_;
  delete CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_reflection_;
  delete CJBUsrMsg_DeathNotice::default_instance_;
  delete CJBUsrMsg_DeathNotice_reflection_;
  delete CJBUsrMsg_PlayerSpree::default_instance_;
  delete CJBUsrMsg_PlayerSpree_reflection_;
  delete CJBUsrMsg_SVTUpdate::default_instance_;
  delete CJBUsrMsg_SVTUpdate_reflection_;
  delete CJBUsrMsg_Damage::default_instance_;
  delete CJBUsrMsg_Damage_reflection_;
  delete CUsrMsg_ResetHud::default_instance_;
  delete CUsrMsg_ResetHud_reflection_;
  delete CUsrMsg_GameTitle::default_instance_;
  delete CUsrMsg_GameTitle_reflection_;
  delete CUsrMsg_RequestState::default_instance_;
  delete CUsrMsg_RequestState_reflection_;
  delete CUsrMsg_ClientInfo::default_instance_;
  delete CUsrMsg_ClientInfo_reflection_;
}

void protobuf_AddDesc_jb_5fusermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_networkbasetypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025jb_usermessages.proto\032\026networkbasetype"
    "s.proto\"~\n\020CUsrMsg_VGUIMenu\022\014\n\004name\030\001 \001("
    "\t\022\014\n\004show\030\002 \001(\010\022)\n\007subkeys\030\003 \003(\0132\030.CUsrM"
    "sg_VGUIMenu.Subkey\032#\n\006Subkey\022\014\n\004name\030\001 \001"
    "(\t\022\013\n\003str\030\002 \001(\t\"\037\n\016CUsrMsg_Geiger\022\r\n\005ran"
    "ge\030\001 \001(\005\"E\n\rCUsrMsg_Train\022\r\n\005train\030\001 \001(\005"
    "\022\022\n\ntrain_side\030\002 \001(\005\022\021\n\tis_active\030\003 \001(\010\""
    "\037\n\017CUsrMsg_HudText\022\014\n\004text\030\001 \001(\t\"S\n\017CUsr"
    "Msg_SayText\022\017\n\007ent_idx\030\001 \001(\005\022\014\n\004text\030\002 \001"
    "(\t\022\014\n\004chat\030\003 \001(\010\022\023\n\013textallchat\030\004 \001(\010\"h\n"
    "\020CUsrMsg_SayText2\022\017\n\007ent_idx\030\001 \001(\005\022\014\n\004ch"
    "at\030\002 \001(\010\022\020\n\010msg_name\030\003 \001(\t\022\016\n\006params\030\004 \003"
    "(\t\022\023\n\013textallchat\030\005 \001(\010\"2\n\017CUsrMsg_TextM"
    "sg\022\017\n\007msg_dst\030\001 \001(\005\022\016\n\006params\030\003 \003(\t\"\336\001\n\016"
    "CUsrMsg_HudMsg\022\017\n\007channel\030\001 \001(\005\022\032\n\003pos\030\002"
    " \001(\0132\r.CMsgVector2D\022\027\n\004clr1\030\003 \001(\0132\t.CMsg"
    "RGBA\022\027\n\004clr2\030\004 \001(\0132\t.CMsgRGBA\022\016\n\006effect\030"
    "\005 \001(\005\022\024\n\014fade_in_time\030\006 \001(\002\022\025\n\rfade_out_"
    "time\030\007 \001(\002\022\021\n\thold_time\030\t \001(\002\022\017\n\007fx_time"
    "\030\n \001(\002\022\014\n\004text\030\013 \001(\t\"^\n\rCUsrMsg_Shake\022\017\n"
    "\007command\030\001 \001(\005\022\027\n\017local_amplitude\030\002 \001(\002\022"
    "\021\n\tfrequency\030\003 \001(\002\022\020\n\010duration\030\004 \001(\002\"Z\n\014"
    "CUsrMsg_Fade\022\020\n\010duration\030\001 \001(\005\022\021\n\thold_t"
    "ime\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\022\026\n\003clr\030\004 \001(\0132\t."
    "CMsgRGBA\"<\n\016CUsrMsg_Rumble\022\r\n\005index\030\001 \001("
    "\005\022\014\n\004data\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\"K\n\024CUsrMs"
    "g_CloseCaption\022\014\n\004hash\030\001 \001(\r\022\020\n\010duration"
    "\030\002 \001(\005\022\023\n\013from_player\030\003 \001(\010\"Q\n\032CUsrMsg_C"
    "loseCaptionDirect\022\014\n\004hash\030\001 \001(\r\022\020\n\010durat"
    "ion\030\002 \001(\005\022\023\n\013from_player\030\003 \001(\010\"\265\001\n\021CUsrM"
    "sg_VoiceMask\0223\n\014player_masks\030\001 \003(\0132\035.CUs"
    "rMsg_VoiceMask.PlayerMask\022\031\n\021player_mod_"
    "enable\030\002 \001(\010\032P\n\nPlayerMask\022\027\n\017game_rules"
    "_mask\030\001 \001(\005\022\021\n\tban_masks\030\002 \001(\005\022\026\n\016proxim"
    "ity_mask\030\003 \001(\005\" \n\020CUsrMsg_HintText\022\014\n\004te"
    "xt\030\001 \001(\t\"$\n\023CUsrMsg_KeyHintText\022\r\n\005hints"
    "\030\001 \003(\t\"\211\001\n\030CUsrMsg_DesiredTimescale\022\031\n\021d"
    "esired_timescale\030\001 \001(\002\022\035\n\025duration_realt"
    "ime_sec\030\002 \001(\002\022\031\n\021interpolator_type\030\003 \001(\005"
    "\022\030\n\020start_blend_time\030\004 \001(\002\"1\n\030CUsrMsg_Cu"
    "rrentTimescale\022\025\n\rcur_timescale\030\001 \001(\002\"O\n"
    "\030CUsrMsg_AchievementEvent\022\023\n\013achievement"
    "\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"\236"
    "\001\n\031CUsrMsg_PlayerStatsUpdate\022\017\n\007version\030"
    "\001 \001(\005\022.\n\005stats\030\004 \003(\0132\037.CUsrMsg_PlayerSta"
    "tsUpdate.Stat\022\017\n\007user_id\030\005 \001(\005\022\013\n\003crc\030\006 "
    "\001(\005\032\"\n\004Stat\022\013\n\003idx\030\001 \001(\005\022\r\n\005delta\030\002 \001(\005\""
    "6\n\026CUsrMsg_CallVoteFailed\022\016\n\006reason\030\001 \001("
    "\005\022\014\n\004time\030\002 \001(\005\"\234\001\n\021CUsrMsg_VoteStart\022\014\n"
    "\004team\030\001 \001(\005\022\017\n\007ent_idx\030\002 \001(\005\022\021\n\tvote_typ"
    "e\030\003 \001(\005\022\020\n\010disp_str\030\004 \001(\t\022\023\n\013details_str"
    "\030\005 \001(\t\022\026\n\016other_team_str\030\006 \001(\t\022\026\n\016is_yes"
    "_no_vote\030\007 \001(\010\"Z\n\020CUsrMsg_VotePass\022\014\n\004te"
    "am\030\001 \001(\005\022\021\n\tvote_type\030\002 \001(\005\022\020\n\010disp_str\030"
    "\003 \001(\t\022\023\n\013details_str\030\004 \001(\t\"2\n\022CUsrMsg_Vo"
    "teFailed\022\014\n\004team\030\001 \001(\005\022\016\n\006reason\030\002 \001(\005\"-"
    "\n\021CUsrMsg_VoteSetup\022\030\n\020potential_issues\030"
    "\001 \003(\t\"\202\001\n$CUsrMsg_SendLastKillerDamageTo"
    "Client\022\026\n\016num_hits_given\030\001 \001(\005\022\024\n\014damage"
    "_given\030\002 \001(\005\022\026\n\016num_hits_taken\030\003 \001(\005\022\024\n\014"
    "damage_taken\030\004 \001(\005\"W\n\020CUsrMsg_ShowMenu\022\030"
    "\n\020bits_valid_slots\030\001 \001(\005\022\024\n\014display_time"
    "\030\002 \001(\005\022\023\n\013menu_string\030\003 \001(\t\")\n\027CUsrMsg_G"
    "lowPropTurnOff\022\016\n\006entidx\030\001 \001(\005\"s\n\022CUsrMs"
    "g_BreakModel\022\021\n\tbreak_msg\030\001 \001(\t\022\020\n\010model"
    "_id\030\002 \001(\005\022\033\n\006origin\030\003 \001(\0132\013.CMsgVector\022\033"
    "\n\006angles\030\004 \001(\0132\013.CMsgQAngle\"i\n\016CUsrMsg_D"
    "amage\022\021\n\tdmg_saved\030\001 \001(\005\022\021\n\tdmg_taken\030\002 "
    "\001(\005\022\020\n\010dmg_bits\030\003 \001(\005\022\037\n\ndmg_origin\030\004 \001("
    "\0132\013.CMsgVector\"5\n\030CJBUsrMsg_ExtVote_Opti"
    "on\022\n\n\002id\030\001 \001(\t\022\r\n\005votes\030\002 \001(\r\"n\n\034CJBUsrM"
    "sg_ExtVoteStateChange\022\r\n\005state\030\001 \001(\005\022\023\n\013"
    "time_offset\030\002 \001(\002\022*\n\007options\030\003 \003(\0132\031.CJB"
    "UsrMsg_ExtVote_Option\"D\n\027CJBUsrMsg_ExtVo"
    "teUpdate\022)\n\006option\030\001 \001(\0132\031.CJBUsrMsg_Ext"
    "Vote_Option\"\274\002\n\030CJBUsrMsg_ShowRoundIntro"
    "\022\020\n\010team_num\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\023\n\013des"
    "cription\030\003 \001(\t\022\035\n\ntext_color\030\004 \001(\0132\t.CMs"
    "gRGBA\022:\n\006model1\030\005 \001(\0132*.CJBUsrMsg_ShowRo"
    "undIntro.CRoundIntroModel\022:\n\006model2\030\006 \001("
    "\0132*.CJBUsrMsg_ShowRoundIntro.CRoundIntro"
    "Model\032S\n\020CRoundIntroModel\022\022\n\nmodel_name\030"
    "\001 \001(\t\022\025\n\ranim_sequence\030\002 \001(\t\022\024\n\014weapon_m"
    "odel\030\003 \001(\t\"\377\002\n\025CJBUsrMsg_DeathNotice\022\024\n\014"
    "victim_index\030\001 \001(\005\022\024\n\014scorer_index\030\002 \001(\005"
    "\022\026\n\016assister_index\030\003 \001(\005\022\025\n\rkiller_weapo"
    "n\030\004 \001(\t\022\021\n\tweapon_id\030\005 \001(\005\022\023\n\013damage_typ"
    "e\030\006 \001(\005\022\023\n\013custom_kill\030\007 \001(\005\022\022\n\nbody_gro"
    "up\030\010 \001(\005\022\027\n\017credit_assister\030\t \001(\010\022\026\n\016vic"
    "tim_teamnum\030\n \001(\005\022\026\n\016killer_teamnum\030\013 \001("
    "\005\022\030\n\020assister_teamnum\030\014 \001(\005\022\024\n\014killer_cn"
    "ame\030\r \001(\t\022\026\n\016assister_cname\030\016 \001(\t\022\024\n\014vic"
    "tim_cname\030\017 \001(\t\022\023\n\013kill_streak\030\020 \001(\005\"=\n\025"
    "CJBUsrMsg_PlayerSpree\022\024\n\014player_index\030\001 "
    "\001(\005\022\016\n\006streak\030\002 \001(\005\"\327\001\n\023CJBUsrMsg_SVTUpd"
    "ate\022\023\n\013alert_state\030\001 \001(\005\022\034\n\024alert_time_r"
    "emaining\030\002 \001(\002\022\030\n\020alert_time_total\030\003 \001(\002"
    "\022\037\n\027last_alert_state_change\030\004 \001(\002\022\034\n\024las"
    "t_backup_dispatch\030\005 \001(\002\022\033\n\023terrorists_on"
    "_start\030\006 \001(\005\022\027\n\017sneaks_on_start\030\007 \001(\005\"\270\001"
    "\n\020CJBUsrMsg_Damage\022\021\n\tvictim_id\030\001 \001(\005\022\023\n"
    "\013attacker_id\030\002 \001(\005\022\016\n\006damage\030\003 \001(\002\022\017\n\007is"
    "_dead\030\004 \001(\010\022\024\n\014is_combatant\030\005 \001(\010\022\020\n\010dmg"
    "_bits\030\006 \001(\005\022\037\n\ndmg_origin\030\007 \001(\0132\013.CMsgVe"
    "ctor\022\022\n\ndmg_custom\030\010 \001(\005\"!\n\020CUsrMsg_Rese"
    "tHud\022\r\n\005reset\030\001 \001(\010\"\"\n\021CUsrMsg_GameTitle"
    "\022\r\n\005dummy\030\001 \001(\005\"%\n\024CUsrMsg_RequestState\022"
    "\r\n\005dummy\030\001 \001(\005\"#\n\022CUsrMsg_ClientInfo\022\r\n\005"
    "dummy\030\001 \001(\005*\305\006\n\017EJBUserMessages\022\017\n\013UM_VG"
    "UIMenu\020\001\022\r\n\tUM_Geiger\020\002\022\014\n\010UM_Train\020\003\022\016\n"
    "\nUM_HudText\020\004\022\016\n\nUM_SayText\020\005\022\017\n\013UM_SayT"
    "ext2\020\006\022\016\n\nUM_TextMsg\020\007\022\r\n\tUM_HudMsg\020\010\022\017\n"
    "\013UM_ResetHud\020\t\022\020\n\014UM_GameTitle\020\n\022\014\n\010UM_S"
    "hake\020\014\022\013\n\007UM_Fade\020\r\022\r\n\tUM_Rumble\020\016\022\023\n\017UM"
    "_CloseCaption\020\017\022\031\n\025UM_CloseCaptionDirect"
    "\020\020\022\020\n\014UM_VoiceMask\020\023\022\023\n\017UM_RequestState\020"
    "\024\022\017\n\013UM_HintText\020\027\022\022\n\016UM_KeyHintText\020\030\022\027"
    "\n\023UM_DesiredTimescale\020\037\022\027\n\023UM_CurrentTim"
    "escale\020 \022\027\n\023UM_AchievementEvent\020!\022\030\n\024UM_"
    "PlayerStatsUpdate\020$\022\021\n\rUM_ClientInfo\020\'\022\025"
    "\n\021UM_CallVoteFailed\020-\022\020\n\014UM_VoteStart\020.\022"
    "\017\n\013UM_VotePass\020/\022\021\n\rUM_VoteFailed\0200\022\020\n\014U"
    "M_VoteSetup\0201\022#\n\037UM_SendLastKillerDamage"
    "ToClient\0203\022\017\n\013UM_ShowMenu\0206\022\026\n\022UM_GlowPr"
    "opTurnOff\020<\022\021\n\rUM_BreakModel\020F\022\r\n\tUM_Dam"
    "age\020G\022\034\n\030JB_UM_ExtVoteStateChange\020I\022\027\n\023J"
    "B_UM_ExtVoteUpdate\020J\022\030\n\024JB_UM_ShowRoundI"
    "ntro\020M\022\025\n\021JB_UM_DeathNotice\020N\022\025\n\021JB_UM_P"
    "layerSpree\020O\022\020\n\014JB_UM_Damage\020P\022\023\n\017JB_UM_"
    "SVTUpdate\020QB\005H\001\200\001\000", 5178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "jb_usermessages.proto", &protobuf_RegisterTypes);
  CUsrMsg_VGUIMenu::default_instance_ = new CUsrMsg_VGUIMenu();
  CUsrMsg_VGUIMenu_Subkey::default_instance_ = new CUsrMsg_VGUIMenu_Subkey();
  CUsrMsg_Geiger::default_instance_ = new CUsrMsg_Geiger();
  CUsrMsg_Train::default_instance_ = new CUsrMsg_Train();
  CUsrMsg_HudText::default_instance_ = new CUsrMsg_HudText();
  CUsrMsg_SayText::default_instance_ = new CUsrMsg_SayText();
  CUsrMsg_SayText2::default_instance_ = new CUsrMsg_SayText2();
  CUsrMsg_TextMsg::default_instance_ = new CUsrMsg_TextMsg();
  CUsrMsg_HudMsg::default_instance_ = new CUsrMsg_HudMsg();
  CUsrMsg_Shake::default_instance_ = new CUsrMsg_Shake();
  CUsrMsg_Fade::default_instance_ = new CUsrMsg_Fade();
  CUsrMsg_Rumble::default_instance_ = new CUsrMsg_Rumble();
  CUsrMsg_CloseCaption::default_instance_ = new CUsrMsg_CloseCaption();
  CUsrMsg_CloseCaptionDirect::default_instance_ = new CUsrMsg_CloseCaptionDirect();
  CUsrMsg_VoiceMask::default_instance_ = new CUsrMsg_VoiceMask();
  CUsrMsg_VoiceMask_PlayerMask::default_instance_ = new CUsrMsg_VoiceMask_PlayerMask();
  CUsrMsg_HintText::default_instance_ = new CUsrMsg_HintText();
  CUsrMsg_KeyHintText::default_instance_ = new CUsrMsg_KeyHintText();
  CUsrMsg_DesiredTimescale::default_instance_ = new CUsrMsg_DesiredTimescale();
  CUsrMsg_CurrentTimescale::default_instance_ = new CUsrMsg_CurrentTimescale();
  CUsrMsg_AchievementEvent::default_instance_ = new CUsrMsg_AchievementEvent();
  CUsrMsg_PlayerStatsUpdate::default_instance_ = new CUsrMsg_PlayerStatsUpdate();
  CUsrMsg_PlayerStatsUpdate_Stat::default_instance_ = new CUsrMsg_PlayerStatsUpdate_Stat();
  CUsrMsg_CallVoteFailed::default_instance_ = new CUsrMsg_CallVoteFailed();
  CUsrMsg_VoteStart::default_instance_ = new CUsrMsg_VoteStart();
  CUsrMsg_VotePass::default_instance_ = new CUsrMsg_VotePass();
  CUsrMsg_VoteFailed::default_instance_ = new CUsrMsg_VoteFailed();
  CUsrMsg_VoteSetup::default_instance_ = new CUsrMsg_VoteSetup();
  CUsrMsg_SendLastKillerDamageToClient::default_instance_ = new CUsrMsg_SendLastKillerDamageToClient();
  CUsrMsg_ShowMenu::default_instance_ = new CUsrMsg_ShowMenu();
  CUsrMsg_GlowPropTurnOff::default_instance_ = new CUsrMsg_GlowPropTurnOff();
  CUsrMsg_BreakModel::default_instance_ = new CUsrMsg_BreakModel();
  CUsrMsg_Damage::default_instance_ = new CUsrMsg_Damage();
  CJBUsrMsg_ExtVote_Option::default_instance_ = new CJBUsrMsg_ExtVote_Option();
  CJBUsrMsg_ExtVoteStateChange::default_instance_ = new CJBUsrMsg_ExtVoteStateChange();
  CJBUsrMsg_ExtVoteUpdate::default_instance_ = new CJBUsrMsg_ExtVoteUpdate();
  CJBUsrMsg_ShowRoundIntro::default_instance_ = new CJBUsrMsg_ShowRoundIntro();
  CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance_ = new CJBUsrMsg_ShowRoundIntro_CRoundIntroModel();
  CJBUsrMsg_DeathNotice::default_instance_ = new CJBUsrMsg_DeathNotice();
  CJBUsrMsg_PlayerSpree::default_instance_ = new CJBUsrMsg_PlayerSpree();
  CJBUsrMsg_SVTUpdate::default_instance_ = new CJBUsrMsg_SVTUpdate();
  CJBUsrMsg_Damage::default_instance_ = new CJBUsrMsg_Damage();
  CUsrMsg_ResetHud::default_instance_ = new CUsrMsg_ResetHud();
  CUsrMsg_GameTitle::default_instance_ = new CUsrMsg_GameTitle();
  CUsrMsg_RequestState::default_instance_ = new CUsrMsg_RequestState();
  CUsrMsg_ClientInfo::default_instance_ = new CUsrMsg_ClientInfo();
  CUsrMsg_VGUIMenu::default_instance_->InitAsDefaultInstance();
  CUsrMsg_VGUIMenu_Subkey::default_instance_->InitAsDefaultInstance();
  CUsrMsg_Geiger::default_instance_->InitAsDefaultInstance();
  CUsrMsg_Train::default_instance_->InitAsDefaultInstance();
  CUsrMsg_HudText::default_instance_->InitAsDefaultInstance();
  CUsrMsg_SayText::default_instance_->InitAsDefaultInstance();
  CUsrMsg_SayText2::default_instance_->InitAsDefaultInstance();
  CUsrMsg_TextMsg::default_instance_->InitAsDefaultInstance();
  CUsrMsg_HudMsg::default_instance_->InitAsDefaultInstance();
  CUsrMsg_Shake::default_instance_->InitAsDefaultInstance();
  CUsrMsg_Fade::default_instance_->InitAsDefaultInstance();
  CUsrMsg_Rumble::default_instance_->InitAsDefaultInstance();
  CUsrMsg_CloseCaption::default_instance_->InitAsDefaultInstance();
  CUsrMsg_CloseCaptionDirect::default_instance_->InitAsDefaultInstance();
  CUsrMsg_VoiceMask::default_instance_->InitAsDefaultInstance();
  CUsrMsg_VoiceMask_PlayerMask::default_instance_->InitAsDefaultInstance();
  CUsrMsg_HintText::default_instance_->InitAsDefaultInstance();
  CUsrMsg_KeyHintText::default_instance_->InitAsDefaultInstance();
  CUsrMsg_DesiredTimescale::default_instance_->InitAsDefaultInstance();
  CUsrMsg_CurrentTimescale::default_instance_->InitAsDefaultInstance();
  CUsrMsg_AchievementEvent::default_instance_->InitAsDefaultInstance();
  CUsrMsg_PlayerStatsUpdate::default_instance_->InitAsDefaultInstance();
  CUsrMsg_PlayerStatsUpdate_Stat::default_instance_->InitAsDefaultInstance();
  CUsrMsg_CallVoteFailed::default_instance_->InitAsDefaultInstance();
  CUsrMsg_VoteStart::default_instance_->InitAsDefaultInstance();
  CUsrMsg_VotePass::default_instance_->InitAsDefaultInstance();
  CUsrMsg_VoteFailed::default_instance_->InitAsDefaultInstance();
  CUsrMsg_VoteSetup::default_instance_->InitAsDefaultInstance();
  CUsrMsg_SendLastKillerDamageToClient::default_instance_->InitAsDefaultInstance();
  CUsrMsg_ShowMenu::default_instance_->InitAsDefaultInstance();
  CUsrMsg_GlowPropTurnOff::default_instance_->InitAsDefaultInstance();
  CUsrMsg_BreakModel::default_instance_->InitAsDefaultInstance();
  CUsrMsg_Damage::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_ExtVote_Option::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_ExtVoteStateChange::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_ExtVoteUpdate::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_ShowRoundIntro::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_DeathNotice::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_PlayerSpree::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_SVTUpdate::default_instance_->InitAsDefaultInstance();
  CJBUsrMsg_Damage::default_instance_->InitAsDefaultInstance();
  CUsrMsg_ResetHud::default_instance_->InitAsDefaultInstance();
  CUsrMsg_GameTitle::default_instance_->InitAsDefaultInstance();
  CUsrMsg_RequestState::default_instance_->InitAsDefaultInstance();
  CUsrMsg_ClientInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jb_5fusermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_jb_5fusermessages_2eproto {
  StaticDescriptorInitializer_jb_5fusermessages_2eproto() {
    protobuf_AddDesc_jb_5fusermessages_2eproto();
  }
} static_descriptor_initializer_jb_5fusermessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EJBUserMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EJBUserMessages_descriptor_;
}
bool EJBUserMessages_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 19:
    case 20:
    case 23:
    case 24:
    case 31:
    case 32:
    case 33:
    case 36:
    case 39:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 51:
    case 54:
    case 60:
    case 70:
    case 71:
    case 73:
    case 74:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_VGUIMenu_Subkey::kNameFieldNumber;
const int CUsrMsg_VGUIMenu_Subkey::kStrFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VGUIMenu_Subkey::CUsrMsg_VGUIMenu_Subkey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VGUIMenu_Subkey::InitAsDefaultInstance() {
}

CUsrMsg_VGUIMenu_Subkey::CUsrMsg_VGUIMenu_Subkey(const CUsrMsg_VGUIMenu_Subkey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VGUIMenu_Subkey::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VGUIMenu_Subkey::~CUsrMsg_VGUIMenu_Subkey() {
  SharedDtor();
}

void CUsrMsg_VGUIMenu_Subkey::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_VGUIMenu_Subkey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VGUIMenu_Subkey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VGUIMenu_Subkey_descriptor_;
}

const CUsrMsg_VGUIMenu_Subkey& CUsrMsg_VGUIMenu_Subkey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VGUIMenu_Subkey* CUsrMsg_VGUIMenu_Subkey::default_instance_ = NULL;

CUsrMsg_VGUIMenu_Subkey* CUsrMsg_VGUIMenu_Subkey::New() const {
  return new CUsrMsg_VGUIMenu_Subkey;
}

void CUsrMsg_VGUIMenu_Subkey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VGUIMenu_Subkey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VGUIMenu_Subkey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VGUIMenu_Subkey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VGUIMenu_Subkey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VGUIMenu_Subkey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VGUIMenu_Subkey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VGUIMenu_Subkey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VGUIMenu_Subkey::MergeFrom(const CUsrMsg_VGUIMenu_Subkey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VGUIMenu_Subkey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VGUIMenu_Subkey::CopyFrom(const CUsrMsg_VGUIMenu_Subkey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VGUIMenu_Subkey::IsInitialized() const {

  return true;
}

void CUsrMsg_VGUIMenu_Subkey::Swap(CUsrMsg_VGUIMenu_Subkey* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VGUIMenu_Subkey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VGUIMenu_Subkey_descriptor_;
  metadata.reflection = CUsrMsg_VGUIMenu_Subkey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUsrMsg_VGUIMenu::kNameFieldNumber;
const int CUsrMsg_VGUIMenu::kShowFieldNumber;
const int CUsrMsg_VGUIMenu::kSubkeysFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VGUIMenu::CUsrMsg_VGUIMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VGUIMenu::InitAsDefaultInstance() {
}

CUsrMsg_VGUIMenu::CUsrMsg_VGUIMenu(const CUsrMsg_VGUIMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VGUIMenu::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VGUIMenu::~CUsrMsg_VGUIMenu() {
  SharedDtor();
}

void CUsrMsg_VGUIMenu::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_VGUIMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VGUIMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VGUIMenu_descriptor_;
}

const CUsrMsg_VGUIMenu& CUsrMsg_VGUIMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VGUIMenu* CUsrMsg_VGUIMenu::default_instance_ = NULL;

CUsrMsg_VGUIMenu* CUsrMsg_VGUIMenu::New() const {
  return new CUsrMsg_VGUIMenu;
}

void CUsrMsg_VGUIMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    show_ = false;
  }
  subkeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VGUIMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }

      // optional bool show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subkeys;
        break;
      }

      // repeated .CUsrMsg_VGUIMenu.Subkey subkeys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subkeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subkeys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VGUIMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }

  // repeated .CUsrMsg_VGUIMenu.Subkey subkeys = 3;
  for (int i = 0; i < this->subkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subkeys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VGUIMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }

  // repeated .CUsrMsg_VGUIMenu.Subkey subkeys = 3;
  for (int i = 0; i < this->subkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subkeys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VGUIMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool show = 2;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CUsrMsg_VGUIMenu.Subkey subkeys = 3;
  total_size += 1 * this->subkeys_size();
  for (int i = 0; i < this->subkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subkeys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VGUIMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VGUIMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VGUIMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VGUIMenu::MergeFrom(const CUsrMsg_VGUIMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  subkeys_.MergeFrom(from.subkeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VGUIMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VGUIMenu::CopyFrom(const CUsrMsg_VGUIMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VGUIMenu::IsInitialized() const {

  return true;
}

void CUsrMsg_VGUIMenu::Swap(CUsrMsg_VGUIMenu* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(show_, other->show_);
    subkeys_.Swap(&other->subkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VGUIMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VGUIMenu_descriptor_;
  metadata.reflection = CUsrMsg_VGUIMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_Geiger::kRangeFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_Geiger::CUsrMsg_Geiger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_Geiger::InitAsDefaultInstance() {
}

CUsrMsg_Geiger::CUsrMsg_Geiger(const CUsrMsg_Geiger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_Geiger::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_Geiger::~CUsrMsg_Geiger() {
  SharedDtor();
}

void CUsrMsg_Geiger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_Geiger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_Geiger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_Geiger_descriptor_;
}

const CUsrMsg_Geiger& CUsrMsg_Geiger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_Geiger* CUsrMsg_Geiger::default_instance_ = NULL;

CUsrMsg_Geiger* CUsrMsg_Geiger::New() const {
  return new CUsrMsg_Geiger;
}

void CUsrMsg_Geiger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_Geiger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_Geiger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_Geiger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_Geiger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_Geiger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_Geiger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_Geiger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_Geiger::MergeFrom(const CUsrMsg_Geiger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_Geiger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_Geiger::CopyFrom(const CUsrMsg_Geiger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_Geiger::IsInitialized() const {

  return true;
}

void CUsrMsg_Geiger::Swap(CUsrMsg_Geiger* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_Geiger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_Geiger_descriptor_;
  metadata.reflection = CUsrMsg_Geiger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_Train::kTrainFieldNumber;
const int CUsrMsg_Train::kTrainSideFieldNumber;
const int CUsrMsg_Train::kIsActiveFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_Train::CUsrMsg_Train()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_Train::InitAsDefaultInstance() {
}

CUsrMsg_Train::CUsrMsg_Train(const CUsrMsg_Train& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_Train::SharedCtor() {
  _cached_size_ = 0;
  train_ = 0;
  train_side_ = 0;
  is_active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_Train::~CUsrMsg_Train() {
  SharedDtor();
}

void CUsrMsg_Train::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_Train::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_Train::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_Train_descriptor_;
}

const CUsrMsg_Train& CUsrMsg_Train::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_Train* CUsrMsg_Train::default_instance_ = NULL;

CUsrMsg_Train* CUsrMsg_Train::New() const {
  return new CUsrMsg_Train;
}

void CUsrMsg_Train::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    train_ = 0;
    train_side_ = 0;
    is_active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_Train::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 train = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_)));
          set_has_train();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_train_side;
        break;
      }

      // optional int32 train_side = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_side_)));
          set_has_train_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_Train::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 train = 1;
  if (has_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->train(), output);
  }

  // optional int32 train_side = 2;
  if (has_train_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->train_side(), output);
  }

  // optional bool is_active = 3;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_Train::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 train = 1;
  if (has_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->train(), target);
  }

  // optional int32 train_side = 2;
  if (has_train_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->train_side(), target);
  }

  // optional bool is_active = 3;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_Train::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 train = 1;
    if (has_train()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train());
    }

    // optional int32 train_side = 2;
    if (has_train_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_side());
    }

    // optional bool is_active = 3;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_Train::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_Train* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_Train*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_Train::MergeFrom(const CUsrMsg_Train& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train()) {
      set_train(from.train());
    }
    if (from.has_train_side()) {
      set_train_side(from.train_side());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_Train::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_Train::CopyFrom(const CUsrMsg_Train& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_Train::IsInitialized() const {

  return true;
}

void CUsrMsg_Train::Swap(CUsrMsg_Train* other) {
  if (other != this) {
    std::swap(train_, other->train_);
    std::swap(train_side_, other->train_side_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_Train::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_Train_descriptor_;
  metadata.reflection = CUsrMsg_Train_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_HudText::kTextFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_HudText::CUsrMsg_HudText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_HudText::InitAsDefaultInstance() {
}

CUsrMsg_HudText::CUsrMsg_HudText(const CUsrMsg_HudText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_HudText::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_HudText::~CUsrMsg_HudText() {
  SharedDtor();
}

void CUsrMsg_HudText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_HudText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_HudText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_HudText_descriptor_;
}

const CUsrMsg_HudText& CUsrMsg_HudText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_HudText* CUsrMsg_HudText::default_instance_ = NULL;

CUsrMsg_HudText* CUsrMsg_HudText::New() const {
  return new CUsrMsg_HudText;
}

void CUsrMsg_HudText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_HudText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_HudText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_HudText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_HudText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_HudText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_HudText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_HudText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_HudText::MergeFrom(const CUsrMsg_HudText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_HudText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_HudText::CopyFrom(const CUsrMsg_HudText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_HudText::IsInitialized() const {

  return true;
}

void CUsrMsg_HudText::Swap(CUsrMsg_HudText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_HudText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_HudText_descriptor_;
  metadata.reflection = CUsrMsg_HudText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_SayText::kEntIdxFieldNumber;
const int CUsrMsg_SayText::kTextFieldNumber;
const int CUsrMsg_SayText::kChatFieldNumber;
const int CUsrMsg_SayText::kTextallchatFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_SayText::CUsrMsg_SayText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_SayText::InitAsDefaultInstance() {
}

CUsrMsg_SayText::CUsrMsg_SayText(const CUsrMsg_SayText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_SayText::SharedCtor() {
  _cached_size_ = 0;
  ent_idx_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_ = false;
  textallchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_SayText::~CUsrMsg_SayText() {
  SharedDtor();
}

void CUsrMsg_SayText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_SayText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_SayText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_SayText_descriptor_;
}

const CUsrMsg_SayText& CUsrMsg_SayText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_SayText* CUsrMsg_SayText::default_instance_ = NULL;

CUsrMsg_SayText* CUsrMsg_SayText::New() const {
  return new CUsrMsg_SayText;
}

void CUsrMsg_SayText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ent_idx_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    chat_ = false;
    textallchat_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_SayText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          set_has_ent_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat;
        break;
      }

      // optional bool chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_textallchat;
        break;
      }

      // optional bool textallchat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textallchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &textallchat_)));
          set_has_textallchat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_SayText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_idx(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  // optional bool chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->chat(), output);
  }

  // optional bool textallchat = 4;
  if (has_textallchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->textallchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_SayText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_idx(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->chat(), target);
  }

  // optional bool textallchat = 4;
  if (has_textallchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->textallchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_SayText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ent_idx = 1;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool chat = 3;
    if (has_chat()) {
      total_size += 1 + 1;
    }

    // optional bool textallchat = 4;
    if (has_textallchat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_SayText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_SayText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_SayText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_SayText::MergeFrom(const CUsrMsg_SayText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ent_idx()) {
      set_ent_idx(from.ent_idx());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_textallchat()) {
      set_textallchat(from.textallchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_SayText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_SayText::CopyFrom(const CUsrMsg_SayText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_SayText::IsInitialized() const {

  return true;
}

void CUsrMsg_SayText::Swap(CUsrMsg_SayText* other) {
  if (other != this) {
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(text_, other->text_);
    std::swap(chat_, other->chat_);
    std::swap(textallchat_, other->textallchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_SayText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_SayText_descriptor_;
  metadata.reflection = CUsrMsg_SayText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_SayText2::kEntIdxFieldNumber;
const int CUsrMsg_SayText2::kChatFieldNumber;
const int CUsrMsg_SayText2::kMsgNameFieldNumber;
const int CUsrMsg_SayText2::kParamsFieldNumber;
const int CUsrMsg_SayText2::kTextallchatFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_SayText2::CUsrMsg_SayText2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_SayText2::InitAsDefaultInstance() {
}

CUsrMsg_SayText2::CUsrMsg_SayText2(const CUsrMsg_SayText2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_SayText2::SharedCtor() {
  _cached_size_ = 0;
  ent_idx_ = 0;
  chat_ = false;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  textallchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_SayText2::~CUsrMsg_SayText2() {
  SharedDtor();
}

void CUsrMsg_SayText2::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_SayText2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_SayText2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_SayText2_descriptor_;
}

const CUsrMsg_SayText2& CUsrMsg_SayText2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_SayText2* CUsrMsg_SayText2::default_instance_ = NULL;

CUsrMsg_SayText2* CUsrMsg_SayText2::New() const {
  return new CUsrMsg_SayText2;
}

void CUsrMsg_SayText2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ent_idx_ = 0;
    chat_ = false;
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
    textallchat_ = false;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_SayText2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          set_has_ent_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat;
        break;
      }

      // optional bool chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_name;
        break;
      }

      // optional string msg_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // repeated string params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectTag(40)) goto parse_textallchat;
        break;
      }

      // optional bool textallchat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textallchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &textallchat_)));
          set_has_textallchat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_SayText2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_idx(), output);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }

  // optional string msg_name = 3;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_name(), output);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->params(i), output);
  }

  // optional bool textallchat = 5;
  if (has_textallchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->textallchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_SayText2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ent_idx = 1;
  if (has_ent_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_idx(), target);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }

  // optional string msg_name = 3;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_name(), target);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->params(i), target);
  }

  // optional bool textallchat = 5;
  if (has_textallchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->textallchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_SayText2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ent_idx = 1;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }

    // optional bool chat = 2;
    if (has_chat()) {
      total_size += 1 + 1;
    }

    // optional string msg_name = 3;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }

    // optional bool textallchat = 5;
    if (has_textallchat()) {
      total_size += 1 + 1;
    }

  }
  // repeated string params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_SayText2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_SayText2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_SayText2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_SayText2::MergeFrom(const CUsrMsg_SayText2& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ent_idx()) {
      set_ent_idx(from.ent_idx());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
    if (from.has_textallchat()) {
      set_textallchat(from.textallchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_SayText2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_SayText2::CopyFrom(const CUsrMsg_SayText2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_SayText2::IsInitialized() const {

  return true;
}

void CUsrMsg_SayText2::Swap(CUsrMsg_SayText2* other) {
  if (other != this) {
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(chat_, other->chat_);
    std::swap(msg_name_, other->msg_name_);
    params_.Swap(&other->params_);
    std::swap(textallchat_, other->textallchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_SayText2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_SayText2_descriptor_;
  metadata.reflection = CUsrMsg_SayText2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_TextMsg::kMsgDstFieldNumber;
const int CUsrMsg_TextMsg::kParamsFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_TextMsg::CUsrMsg_TextMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_TextMsg::InitAsDefaultInstance() {
}

CUsrMsg_TextMsg::CUsrMsg_TextMsg(const CUsrMsg_TextMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_TextMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_dst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_TextMsg::~CUsrMsg_TextMsg() {
  SharedDtor();
}

void CUsrMsg_TextMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_TextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_TextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_TextMsg_descriptor_;
}

const CUsrMsg_TextMsg& CUsrMsg_TextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_TextMsg* CUsrMsg_TextMsg::default_instance_ = NULL;

CUsrMsg_TextMsg* CUsrMsg_TextMsg::New() const {
  return new CUsrMsg_TextMsg;
}

void CUsrMsg_TextMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_dst_ = 0;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_TextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_dst_)));
          set_has_msg_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // repeated string params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_TextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_dst = 1;
  if (has_msg_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_dst(), output);
  }

  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_TextMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_dst = 1;
  if (has_msg_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_dst(), target);
  }

  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_TextMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_dst = 1;
    if (has_msg_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_dst());
    }

  }
  // repeated string params = 3;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_TextMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_TextMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_TextMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_TextMsg::MergeFrom(const CUsrMsg_TextMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_dst()) {
      set_msg_dst(from.msg_dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_TextMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_TextMsg::CopyFrom(const CUsrMsg_TextMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_TextMsg::IsInitialized() const {

  return true;
}

void CUsrMsg_TextMsg::Swap(CUsrMsg_TextMsg* other) {
  if (other != this) {
    std::swap(msg_dst_, other->msg_dst_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_TextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_TextMsg_descriptor_;
  metadata.reflection = CUsrMsg_TextMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_HudMsg::kChannelFieldNumber;
const int CUsrMsg_HudMsg::kPosFieldNumber;
const int CUsrMsg_HudMsg::kClr1FieldNumber;
const int CUsrMsg_HudMsg::kClr2FieldNumber;
const int CUsrMsg_HudMsg::kEffectFieldNumber;
const int CUsrMsg_HudMsg::kFadeInTimeFieldNumber;
const int CUsrMsg_HudMsg::kFadeOutTimeFieldNumber;
const int CUsrMsg_HudMsg::kHoldTimeFieldNumber;
const int CUsrMsg_HudMsg::kFxTimeFieldNumber;
const int CUsrMsg_HudMsg::kTextFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_HudMsg::CUsrMsg_HudMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_HudMsg::InitAsDefaultInstance() {
  pos_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
  clr1_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
  clr2_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
}

CUsrMsg_HudMsg::CUsrMsg_HudMsg(const CUsrMsg_HudMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_HudMsg::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  pos_ = NULL;
  clr1_ = NULL;
  clr2_ = NULL;
  effect_ = 0;
  fade_in_time_ = 0;
  fade_out_time_ = 0;
  hold_time_ = 0;
  fx_time_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_HudMsg::~CUsrMsg_HudMsg() {
  SharedDtor();
}

void CUsrMsg_HudMsg::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete clr1_;
    delete clr2_;
  }
}

void CUsrMsg_HudMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_HudMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_HudMsg_descriptor_;
}

const CUsrMsg_HudMsg& CUsrMsg_HudMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_HudMsg* CUsrMsg_HudMsg::default_instance_ = NULL;

CUsrMsg_HudMsg* CUsrMsg_HudMsg::New() const {
  return new CUsrMsg_HudMsg;
}

void CUsrMsg_HudMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CMsgVector2D::Clear();
    }
    if (has_clr1()) {
      if (clr1_ != NULL) clr1_->::CMsgRGBA::Clear();
    }
    if (has_clr2()) {
      if (clr2_ != NULL) clr2_->::CMsgRGBA::Clear();
    }
    effect_ = 0;
    fade_in_time_ = 0;
    fade_out_time_ = 0;
    hold_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fx_time_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_HudMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .CMsgVector2D pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clr1;
        break;
      }

      // optional .CMsgRGBA clr1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clr2;
        break;
      }

      // optional .CMsgRGBA clr2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }

      // optional int32 effect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fade_in_time;
        break;
      }

      // optional float fade_in_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_time_)));
          set_has_fade_in_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fade_out_time;
        break;
      }

      // optional float fade_out_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_time_)));
          set_has_fade_out_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_hold_time;
        break;
      }

      // optional float hold_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_fx_time;
        break;
      }

      // optional float fx_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fx_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_time_)));
          set_has_fx_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_text;
        break;
      }

      // optional string text = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_HudMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // optional .CMsgVector2D pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional .CMsgRGBA clr1 = 3;
  if (has_clr1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clr1(), output);
  }

  // optional .CMsgRGBA clr2 = 4;
  if (has_clr2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clr2(), output);
  }

  // optional int32 effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->effect(), output);
  }

  // optional float fade_in_time = 6;
  if (has_fade_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fade_in_time(), output);
  }

  // optional float fade_out_time = 7;
  if (has_fade_out_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fade_out_time(), output);
  }

  // optional float hold_time = 9;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hold_time(), output);
  }

  // optional float fx_time = 10;
  if (has_fx_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx_time(), output);
  }

  // optional string text = 11;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_HudMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // optional .CMsgVector2D pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional .CMsgRGBA clr1 = 3;
  if (has_clr1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clr1(), target);
  }

  // optional .CMsgRGBA clr2 = 4;
  if (has_clr2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clr2(), target);
  }

  // optional int32 effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->effect(), target);
  }

  // optional float fade_in_time = 6;
  if (has_fade_in_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fade_in_time(), target);
  }

  // optional float fade_out_time = 7;
  if (has_fade_out_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hold_time(), target);
  }

  // optional float fx_time = 10;
  if (has_fx_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx_time(), target);
  }

  // optional string text = 11;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_HudMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .CMsgVector2D pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .CMsgRGBA clr1 = 3;
    if (has_clr1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr1());
    }

    // optional .CMsgRGBA clr2 = 4;
    if (has_clr2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr2());
    }

    // optional int32 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }

    // optional float fade_in_time = 6;
    if (has_fade_in_time()) {
      total_size += 1 + 4;
    }

    // optional float fade_out_time = 7;
    if (has_fade_out_time()) {
      total_size += 1 + 4;
    }

    // optional float hold_time = 9;
    if (has_hold_time()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fx_time = 10;
    if (has_fx_time()) {
      total_size += 1 + 4;
    }

    // optional string text = 11;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_HudMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_HudMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_HudMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_HudMsg::MergeFrom(const CUsrMsg_HudMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_pos()) {
      mutable_pos()->::CMsgVector2D::MergeFrom(from.pos());
    }
    if (from.has_clr1()) {
      mutable_clr1()->::CMsgRGBA::MergeFrom(from.clr1());
    }
    if (from.has_clr2()) {
      mutable_clr2()->::CMsgRGBA::MergeFrom(from.clr2());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_fade_in_time()) {
      set_fade_in_time(from.fade_in_time());
    }
    if (from.has_fade_out_time()) {
      set_fade_out_time(from.fade_out_time());
    }
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fx_time()) {
      set_fx_time(from.fx_time());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_HudMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_HudMsg::CopyFrom(const CUsrMsg_HudMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_HudMsg::IsInitialized() const {

  return true;
}

void CUsrMsg_HudMsg::Swap(CUsrMsg_HudMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(pos_, other->pos_);
    std::swap(clr1_, other->clr1_);
    std::swap(clr2_, other->clr2_);
    std::swap(effect_, other->effect_);
    std::swap(fade_in_time_, other->fade_in_time_);
    std::swap(fade_out_time_, other->fade_out_time_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(fx_time_, other->fx_time_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_HudMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_HudMsg_descriptor_;
  metadata.reflection = CUsrMsg_HudMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_Shake::kCommandFieldNumber;
const int CUsrMsg_Shake::kLocalAmplitudeFieldNumber;
const int CUsrMsg_Shake::kFrequencyFieldNumber;
const int CUsrMsg_Shake::kDurationFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_Shake::CUsrMsg_Shake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_Shake::InitAsDefaultInstance() {
}

CUsrMsg_Shake::CUsrMsg_Shake(const CUsrMsg_Shake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_Shake::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  local_amplitude_ = 0;
  frequency_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_Shake::~CUsrMsg_Shake() {
  SharedDtor();
}

void CUsrMsg_Shake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_Shake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_Shake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_Shake_descriptor_;
}

const CUsrMsg_Shake& CUsrMsg_Shake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_Shake* CUsrMsg_Shake::default_instance_ = NULL;

CUsrMsg_Shake* CUsrMsg_Shake::New() const {
  return new CUsrMsg_Shake;
}

void CUsrMsg_Shake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    local_amplitude_ = 0;
    frequency_ = 0;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_Shake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_local_amplitude;
        break;
      }

      // optional float local_amplitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_local_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_amplitude_)));
          set_has_local_amplitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_Shake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // optional float local_amplitude = 2;
  if (has_local_amplitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->local_amplitude(), output);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_Shake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // optional float local_amplitude = 2;
  if (has_local_amplitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->local_amplitude(), target);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_Shake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

    // optional float local_amplitude = 2;
    if (has_local_amplitude()) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_Shake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_Shake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_Shake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_Shake::MergeFrom(const CUsrMsg_Shake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_local_amplitude()) {
      set_local_amplitude(from.local_amplitude());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_Shake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_Shake::CopyFrom(const CUsrMsg_Shake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_Shake::IsInitialized() const {

  return true;
}

void CUsrMsg_Shake::Swap(CUsrMsg_Shake* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(local_amplitude_, other->local_amplitude_);
    std::swap(frequency_, other->frequency_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_Shake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_Shake_descriptor_;
  metadata.reflection = CUsrMsg_Shake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_Fade::kDurationFieldNumber;
const int CUsrMsg_Fade::kHoldTimeFieldNumber;
const int CUsrMsg_Fade::kFlagsFieldNumber;
const int CUsrMsg_Fade::kClrFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_Fade::CUsrMsg_Fade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_Fade::InitAsDefaultInstance() {
  clr_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
}

CUsrMsg_Fade::CUsrMsg_Fade(const CUsrMsg_Fade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_Fade::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  hold_time_ = 0;
  flags_ = 0;
  clr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_Fade::~CUsrMsg_Fade() {
  SharedDtor();
}

void CUsrMsg_Fade::SharedDtor() {
  if (this != default_instance_) {
    delete clr_;
  }
}

void CUsrMsg_Fade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_Fade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_Fade_descriptor_;
}

const CUsrMsg_Fade& CUsrMsg_Fade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_Fade* CUsrMsg_Fade::default_instance_ = NULL;

CUsrMsg_Fade* CUsrMsg_Fade::New() const {
  return new CUsrMsg_Fade;
}

void CUsrMsg_Fade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    hold_time_ = 0;
    flags_ = 0;
    if (has_clr()) {
      if (clr_ != NULL) clr_->::CMsgRGBA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_Fade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hold_time;
        break;
      }

      // optional int32 hold_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clr;
        break;
      }

      // optional .CMsgRGBA clr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_Fade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional int32 hold_time = 2;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hold_time(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // optional .CMsgRGBA clr = 4;
  if (has_clr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_Fade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // optional int32 hold_time = 2;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hold_time(), target);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  // optional .CMsgRGBA clr = 4;
  if (has_clr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_Fade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 hold_time = 2;
    if (has_hold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hold_time());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional .CMsgRGBA clr = 4;
    if (has_clr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_Fade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_Fade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_Fade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_Fade::MergeFrom(const CUsrMsg_Fade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_clr()) {
      mutable_clr()->::CMsgRGBA::MergeFrom(from.clr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_Fade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_Fade::CopyFrom(const CUsrMsg_Fade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_Fade::IsInitialized() const {

  return true;
}

void CUsrMsg_Fade::Swap(CUsrMsg_Fade* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(flags_, other->flags_);
    std::swap(clr_, other->clr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_Fade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_Fade_descriptor_;
  metadata.reflection = CUsrMsg_Fade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_Rumble::kIndexFieldNumber;
const int CUsrMsg_Rumble::kDataFieldNumber;
const int CUsrMsg_Rumble::kFlagsFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_Rumble::CUsrMsg_Rumble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_Rumble::InitAsDefaultInstance() {
}

CUsrMsg_Rumble::CUsrMsg_Rumble(const CUsrMsg_Rumble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_Rumble::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  data_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_Rumble::~CUsrMsg_Rumble() {
  SharedDtor();
}

void CUsrMsg_Rumble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_Rumble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_Rumble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_Rumble_descriptor_;
}

const CUsrMsg_Rumble& CUsrMsg_Rumble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_Rumble* CUsrMsg_Rumble::default_instance_ = NULL;

CUsrMsg_Rumble* CUsrMsg_Rumble::New() const {
  return new CUsrMsg_Rumble;
}

void CUsrMsg_Rumble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    data_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_Rumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int32 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_Rumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_Rumble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_Rumble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_Rumble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_Rumble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_Rumble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_Rumble::MergeFrom(const CUsrMsg_Rumble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_Rumble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_Rumble::CopyFrom(const CUsrMsg_Rumble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_Rumble::IsInitialized() const {

  return true;
}

void CUsrMsg_Rumble::Swap(CUsrMsg_Rumble* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_Rumble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_Rumble_descriptor_;
  metadata.reflection = CUsrMsg_Rumble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_CloseCaption::kHashFieldNumber;
const int CUsrMsg_CloseCaption::kDurationFieldNumber;
const int CUsrMsg_CloseCaption::kFromPlayerFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_CloseCaption::CUsrMsg_CloseCaption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_CloseCaption::InitAsDefaultInstance() {
}

CUsrMsg_CloseCaption::CUsrMsg_CloseCaption(const CUsrMsg_CloseCaption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_CloseCaption::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_CloseCaption::~CUsrMsg_CloseCaption() {
  SharedDtor();
}

void CUsrMsg_CloseCaption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_CloseCaption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_CloseCaption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_CloseCaption_descriptor_;
}

const CUsrMsg_CloseCaption& CUsrMsg_CloseCaption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_CloseCaption* CUsrMsg_CloseCaption::default_instance_ = NULL;

CUsrMsg_CloseCaption* CUsrMsg_CloseCaption::New() const {
  return new CUsrMsg_CloseCaption;
}

void CUsrMsg_CloseCaption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    duration_ = 0;
    from_player_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_CloseCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_CloseCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_CloseCaption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_CloseCaption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_CloseCaption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_CloseCaption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_CloseCaption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_CloseCaption::MergeFrom(const CUsrMsg_CloseCaption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_CloseCaption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_CloseCaption::CopyFrom(const CUsrMsg_CloseCaption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_CloseCaption::IsInitialized() const {

  return true;
}

void CUsrMsg_CloseCaption::Swap(CUsrMsg_CloseCaption* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_CloseCaption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_CloseCaption_descriptor_;
  metadata.reflection = CUsrMsg_CloseCaption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_CloseCaptionDirect::kHashFieldNumber;
const int CUsrMsg_CloseCaptionDirect::kDurationFieldNumber;
const int CUsrMsg_CloseCaptionDirect::kFromPlayerFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_CloseCaptionDirect::CUsrMsg_CloseCaptionDirect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_CloseCaptionDirect::InitAsDefaultInstance() {
}

CUsrMsg_CloseCaptionDirect::CUsrMsg_CloseCaptionDirect(const CUsrMsg_CloseCaptionDirect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_CloseCaptionDirect::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_CloseCaptionDirect::~CUsrMsg_CloseCaptionDirect() {
  SharedDtor();
}

void CUsrMsg_CloseCaptionDirect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_CloseCaptionDirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_CloseCaptionDirect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_CloseCaptionDirect_descriptor_;
}

const CUsrMsg_CloseCaptionDirect& CUsrMsg_CloseCaptionDirect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_CloseCaptionDirect* CUsrMsg_CloseCaptionDirect::default_instance_ = NULL;

CUsrMsg_CloseCaptionDirect* CUsrMsg_CloseCaptionDirect::New() const {
  return new CUsrMsg_CloseCaptionDirect;
}

void CUsrMsg_CloseCaptionDirect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    duration_ = 0;
    from_player_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_CloseCaptionDirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_CloseCaptionDirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_CloseCaptionDirect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_CloseCaptionDirect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_CloseCaptionDirect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_CloseCaptionDirect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_CloseCaptionDirect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_CloseCaptionDirect::MergeFrom(const CUsrMsg_CloseCaptionDirect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_CloseCaptionDirect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_CloseCaptionDirect::CopyFrom(const CUsrMsg_CloseCaptionDirect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_CloseCaptionDirect::IsInitialized() const {

  return true;
}

void CUsrMsg_CloseCaptionDirect::Swap(CUsrMsg_CloseCaptionDirect* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_CloseCaptionDirect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_CloseCaptionDirect_descriptor_;
  metadata.reflection = CUsrMsg_CloseCaptionDirect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_VoiceMask_PlayerMask::kGameRulesMaskFieldNumber;
const int CUsrMsg_VoiceMask_PlayerMask::kBanMasksFieldNumber;
const int CUsrMsg_VoiceMask_PlayerMask::kProximityMaskFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VoiceMask_PlayerMask::CUsrMsg_VoiceMask_PlayerMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VoiceMask_PlayerMask::InitAsDefaultInstance() {
}

CUsrMsg_VoiceMask_PlayerMask::CUsrMsg_VoiceMask_PlayerMask(const CUsrMsg_VoiceMask_PlayerMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VoiceMask_PlayerMask::SharedCtor() {
  _cached_size_ = 0;
  game_rules_mask_ = 0;
  ban_masks_ = 0;
  proximity_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VoiceMask_PlayerMask::~CUsrMsg_VoiceMask_PlayerMask() {
  SharedDtor();
}

void CUsrMsg_VoiceMask_PlayerMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_VoiceMask_PlayerMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VoiceMask_PlayerMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VoiceMask_PlayerMask_descriptor_;
}

const CUsrMsg_VoiceMask_PlayerMask& CUsrMsg_VoiceMask_PlayerMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VoiceMask_PlayerMask* CUsrMsg_VoiceMask_PlayerMask::default_instance_ = NULL;

CUsrMsg_VoiceMask_PlayerMask* CUsrMsg_VoiceMask_PlayerMask::New() const {
  return new CUsrMsg_VoiceMask_PlayerMask;
}

void CUsrMsg_VoiceMask_PlayerMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_rules_mask_ = 0;
    ban_masks_ = 0;
    proximity_mask_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VoiceMask_PlayerMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_rules_mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_rules_mask_)));
          set_has_game_rules_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ban_masks;
        break;
      }

      // optional int32 ban_masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ban_masks_)));
          set_has_ban_masks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proximity_mask;
        break;
      }

      // optional int32 proximity_mask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proximity_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proximity_mask_)));
          set_has_proximity_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VoiceMask_PlayerMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_rules_mask = 1;
  if (has_game_rules_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_rules_mask(), output);
  }

  // optional int32 ban_masks = 2;
  if (has_ban_masks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ban_masks(), output);
  }

  // optional int32 proximity_mask = 3;
  if (has_proximity_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->proximity_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VoiceMask_PlayerMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_rules_mask = 1;
  if (has_game_rules_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_rules_mask(), target);
  }

  // optional int32 ban_masks = 2;
  if (has_ban_masks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ban_masks(), target);
  }

  // optional int32 proximity_mask = 3;
  if (has_proximity_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->proximity_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VoiceMask_PlayerMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_rules_mask = 1;
    if (has_game_rules_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_rules_mask());
    }

    // optional int32 ban_masks = 2;
    if (has_ban_masks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ban_masks());
    }

    // optional int32 proximity_mask = 3;
    if (has_proximity_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proximity_mask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VoiceMask_PlayerMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VoiceMask_PlayerMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VoiceMask_PlayerMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VoiceMask_PlayerMask::MergeFrom(const CUsrMsg_VoiceMask_PlayerMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_rules_mask()) {
      set_game_rules_mask(from.game_rules_mask());
    }
    if (from.has_ban_masks()) {
      set_ban_masks(from.ban_masks());
    }
    if (from.has_proximity_mask()) {
      set_proximity_mask(from.proximity_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VoiceMask_PlayerMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VoiceMask_PlayerMask::CopyFrom(const CUsrMsg_VoiceMask_PlayerMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VoiceMask_PlayerMask::IsInitialized() const {

  return true;
}

void CUsrMsg_VoiceMask_PlayerMask::Swap(CUsrMsg_VoiceMask_PlayerMask* other) {
  if (other != this) {
    std::swap(game_rules_mask_, other->game_rules_mask_);
    std::swap(ban_masks_, other->ban_masks_);
    std::swap(proximity_mask_, other->proximity_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VoiceMask_PlayerMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VoiceMask_PlayerMask_descriptor_;
  metadata.reflection = CUsrMsg_VoiceMask_PlayerMask_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUsrMsg_VoiceMask::kPlayerMasksFieldNumber;
const int CUsrMsg_VoiceMask::kPlayerModEnableFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VoiceMask::CUsrMsg_VoiceMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VoiceMask::InitAsDefaultInstance() {
}

CUsrMsg_VoiceMask::CUsrMsg_VoiceMask(const CUsrMsg_VoiceMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VoiceMask::SharedCtor() {
  _cached_size_ = 0;
  player_mod_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VoiceMask::~CUsrMsg_VoiceMask() {
  SharedDtor();
}

void CUsrMsg_VoiceMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_VoiceMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VoiceMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VoiceMask_descriptor_;
}

const CUsrMsg_VoiceMask& CUsrMsg_VoiceMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VoiceMask* CUsrMsg_VoiceMask::default_instance_ = NULL;

CUsrMsg_VoiceMask* CUsrMsg_VoiceMask::New() const {
  return new CUsrMsg_VoiceMask;
}

void CUsrMsg_VoiceMask::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    player_mod_enable_ = false;
  }
  player_masks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VoiceMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CUsrMsg_VoiceMask.PlayerMask player_masks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_masks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_masks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_masks;
        if (input->ExpectTag(16)) goto parse_player_mod_enable;
        break;
      }

      // optional bool player_mod_enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_mod_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_mod_enable_)));
          set_has_player_mod_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VoiceMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (int i = 0; i < this->player_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_masks(i), output);
  }

  // optional bool player_mod_enable = 2;
  if (has_player_mod_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->player_mod_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VoiceMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (int i = 0; i < this->player_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_masks(i), target);
  }

  // optional bool player_mod_enable = 2;
  if (has_player_mod_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->player_mod_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VoiceMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool player_mod_enable = 2;
    if (has_player_mod_enable()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  total_size += 1 * this->player_masks_size();
  for (int i = 0; i < this->player_masks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_masks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VoiceMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VoiceMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VoiceMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VoiceMask::MergeFrom(const CUsrMsg_VoiceMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_masks_.MergeFrom(from.player_masks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_player_mod_enable()) {
      set_player_mod_enable(from.player_mod_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VoiceMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VoiceMask::CopyFrom(const CUsrMsg_VoiceMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VoiceMask::IsInitialized() const {

  return true;
}

void CUsrMsg_VoiceMask::Swap(CUsrMsg_VoiceMask* other) {
  if (other != this) {
    player_masks_.Swap(&other->player_masks_);
    std::swap(player_mod_enable_, other->player_mod_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VoiceMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VoiceMask_descriptor_;
  metadata.reflection = CUsrMsg_VoiceMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_HintText::kTextFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_HintText::CUsrMsg_HintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_HintText::InitAsDefaultInstance() {
}

CUsrMsg_HintText::CUsrMsg_HintText(const CUsrMsg_HintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_HintText::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_HintText::~CUsrMsg_HintText() {
  SharedDtor();
}

void CUsrMsg_HintText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_HintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_HintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_HintText_descriptor_;
}

const CUsrMsg_HintText& CUsrMsg_HintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_HintText* CUsrMsg_HintText::default_instance_ = NULL;

CUsrMsg_HintText* CUsrMsg_HintText::New() const {
  return new CUsrMsg_HintText;
}

void CUsrMsg_HintText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_HintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_HintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_HintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_HintText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_HintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_HintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_HintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_HintText::MergeFrom(const CUsrMsg_HintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_HintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_HintText::CopyFrom(const CUsrMsg_HintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_HintText::IsInitialized() const {

  return true;
}

void CUsrMsg_HintText::Swap(CUsrMsg_HintText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_HintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_HintText_descriptor_;
  metadata.reflection = CUsrMsg_HintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_KeyHintText::kHintsFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_KeyHintText::CUsrMsg_KeyHintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_KeyHintText::InitAsDefaultInstance() {
}

CUsrMsg_KeyHintText::CUsrMsg_KeyHintText(const CUsrMsg_KeyHintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_KeyHintText::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_KeyHintText::~CUsrMsg_KeyHintText() {
  SharedDtor();
}

void CUsrMsg_KeyHintText::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_KeyHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_KeyHintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_KeyHintText_descriptor_;
}

const CUsrMsg_KeyHintText& CUsrMsg_KeyHintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_KeyHintText* CUsrMsg_KeyHintText::default_instance_ = NULL;

CUsrMsg_KeyHintText* CUsrMsg_KeyHintText::New() const {
  return new CUsrMsg_KeyHintText;
}

void CUsrMsg_KeyHintText::Clear() {
  hints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_KeyHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string hints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints(this->hints_size() - 1).data(),
            this->hints(this->hints_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hints;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_KeyHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string hints = 1;
  for (int i = 0; i < this->hints_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hints(i).data(), this->hints(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_KeyHintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string hints = 1;
  for (int i = 0; i < this->hints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints(i).data(), this->hints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->hints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_KeyHintText::ByteSize() const {
  int total_size = 0;

  // repeated string hints = 1;
  total_size += 1 * this->hints_size();
  for (int i = 0; i < this->hints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_KeyHintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_KeyHintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_KeyHintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_KeyHintText::MergeFrom(const CUsrMsg_KeyHintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  hints_.MergeFrom(from.hints_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_KeyHintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_KeyHintText::CopyFrom(const CUsrMsg_KeyHintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_KeyHintText::IsInitialized() const {

  return true;
}

void CUsrMsg_KeyHintText::Swap(CUsrMsg_KeyHintText* other) {
  if (other != this) {
    hints_.Swap(&other->hints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_KeyHintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_KeyHintText_descriptor_;
  metadata.reflection = CUsrMsg_KeyHintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_DesiredTimescale::kDesiredTimescaleFieldNumber;
const int CUsrMsg_DesiredTimescale::kDurationRealtimeSecFieldNumber;
const int CUsrMsg_DesiredTimescale::kInterpolatorTypeFieldNumber;
const int CUsrMsg_DesiredTimescale::kStartBlendTimeFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_DesiredTimescale::CUsrMsg_DesiredTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_DesiredTimescale::InitAsDefaultInstance() {
}

CUsrMsg_DesiredTimescale::CUsrMsg_DesiredTimescale(const CUsrMsg_DesiredTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_DesiredTimescale::SharedCtor() {
  _cached_size_ = 0;
  desired_timescale_ = 0;
  duration_realtime_sec_ = 0;
  interpolator_type_ = 0;
  start_blend_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_DesiredTimescale::~CUsrMsg_DesiredTimescale() {
  SharedDtor();
}

void CUsrMsg_DesiredTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_DesiredTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_DesiredTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_DesiredTimescale_descriptor_;
}

const CUsrMsg_DesiredTimescale& CUsrMsg_DesiredTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_DesiredTimescale* CUsrMsg_DesiredTimescale::default_instance_ = NULL;

CUsrMsg_DesiredTimescale* CUsrMsg_DesiredTimescale::New() const {
  return new CUsrMsg_DesiredTimescale;
}

void CUsrMsg_DesiredTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desired_timescale_ = 0;
    duration_realtime_sec_ = 0;
    interpolator_type_ = 0;
    start_blend_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_DesiredTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float desired_timescale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_timescale_)));
          set_has_desired_timescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration_realtime_sec;
        break;
      }

      // optional float duration_realtime_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration_realtime_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_realtime_sec_)));
          set_has_duration_realtime_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_interpolator_type;
        break;
      }

      // optional int32 interpolator_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolator_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interpolator_type_)));
          set_has_interpolator_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start_blend_time;
        break;
      }

      // optional float start_blend_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_blend_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_blend_time_)));
          set_has_start_blend_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_DesiredTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float desired_timescale = 1;
  if (has_desired_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->desired_timescale(), output);
  }

  // optional float duration_realtime_sec = 2;
  if (has_duration_realtime_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration_realtime_sec(), output);
  }

  // optional int32 interpolator_type = 3;
  if (has_interpolator_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interpolator_type(), output);
  }

  // optional float start_blend_time = 4;
  if (has_start_blend_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_blend_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_DesiredTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float desired_timescale = 1;
  if (has_desired_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->desired_timescale(), target);
  }

  // optional float duration_realtime_sec = 2;
  if (has_duration_realtime_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration_realtime_sec(), target);
  }

  // optional int32 interpolator_type = 3;
  if (has_interpolator_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interpolator_type(), target);
  }

  // optional float start_blend_time = 4;
  if (has_start_blend_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start_blend_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_DesiredTimescale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float desired_timescale = 1;
    if (has_desired_timescale()) {
      total_size += 1 + 4;
    }

    // optional float duration_realtime_sec = 2;
    if (has_duration_realtime_sec()) {
      total_size += 1 + 4;
    }

    // optional int32 interpolator_type = 3;
    if (has_interpolator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interpolator_type());
    }

    // optional float start_blend_time = 4;
    if (has_start_blend_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_DesiredTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_DesiredTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_DesiredTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_DesiredTimescale::MergeFrom(const CUsrMsg_DesiredTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desired_timescale()) {
      set_desired_timescale(from.desired_timescale());
    }
    if (from.has_duration_realtime_sec()) {
      set_duration_realtime_sec(from.duration_realtime_sec());
    }
    if (from.has_interpolator_type()) {
      set_interpolator_type(from.interpolator_type());
    }
    if (from.has_start_blend_time()) {
      set_start_blend_time(from.start_blend_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_DesiredTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_DesiredTimescale::CopyFrom(const CUsrMsg_DesiredTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_DesiredTimescale::IsInitialized() const {

  return true;
}

void CUsrMsg_DesiredTimescale::Swap(CUsrMsg_DesiredTimescale* other) {
  if (other != this) {
    std::swap(desired_timescale_, other->desired_timescale_);
    std::swap(duration_realtime_sec_, other->duration_realtime_sec_);
    std::swap(interpolator_type_, other->interpolator_type_);
    std::swap(start_blend_time_, other->start_blend_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_DesiredTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_DesiredTimescale_descriptor_;
  metadata.reflection = CUsrMsg_DesiredTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_CurrentTimescale::kCurTimescaleFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_CurrentTimescale::CUsrMsg_CurrentTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_CurrentTimescale::InitAsDefaultInstance() {
}

CUsrMsg_CurrentTimescale::CUsrMsg_CurrentTimescale(const CUsrMsg_CurrentTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_CurrentTimescale::SharedCtor() {
  _cached_size_ = 0;
  cur_timescale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_CurrentTimescale::~CUsrMsg_CurrentTimescale() {
  SharedDtor();
}

void CUsrMsg_CurrentTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_CurrentTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_CurrentTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_CurrentTimescale_descriptor_;
}

const CUsrMsg_CurrentTimescale& CUsrMsg_CurrentTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_CurrentTimescale* CUsrMsg_CurrentTimescale::default_instance_ = NULL;

CUsrMsg_CurrentTimescale* CUsrMsg_CurrentTimescale::New() const {
  return new CUsrMsg_CurrentTimescale;
}

void CUsrMsg_CurrentTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_timescale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_CurrentTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cur_timescale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_timescale_)));
          set_has_cur_timescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_CurrentTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float cur_timescale = 1;
  if (has_cur_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cur_timescale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_CurrentTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float cur_timescale = 1;
  if (has_cur_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cur_timescale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_CurrentTimescale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cur_timescale = 1;
    if (has_cur_timescale()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_CurrentTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_CurrentTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_CurrentTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_CurrentTimescale::MergeFrom(const CUsrMsg_CurrentTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_timescale()) {
      set_cur_timescale(from.cur_timescale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_CurrentTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_CurrentTimescale::CopyFrom(const CUsrMsg_CurrentTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_CurrentTimescale::IsInitialized() const {

  return true;
}

void CUsrMsg_CurrentTimescale::Swap(CUsrMsg_CurrentTimescale* other) {
  if (other != this) {
    std::swap(cur_timescale_, other->cur_timescale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_CurrentTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_CurrentTimescale_descriptor_;
  metadata.reflection = CUsrMsg_CurrentTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_AchievementEvent::kAchievementFieldNumber;
const int CUsrMsg_AchievementEvent::kCountFieldNumber;
const int CUsrMsg_AchievementEvent::kUserIdFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_AchievementEvent::CUsrMsg_AchievementEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_AchievementEvent::InitAsDefaultInstance() {
}

CUsrMsg_AchievementEvent::CUsrMsg_AchievementEvent(const CUsrMsg_AchievementEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_AchievementEvent::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = 0;
  count_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_AchievementEvent::~CUsrMsg_AchievementEvent() {
  SharedDtor();
}

void CUsrMsg_AchievementEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_AchievementEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_AchievementEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_AchievementEvent_descriptor_;
}

const CUsrMsg_AchievementEvent& CUsrMsg_AchievementEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_AchievementEvent* CUsrMsg_AchievementEvent::default_instance_ = NULL;

CUsrMsg_AchievementEvent* CUsrMsg_AchievementEvent::New() const {
  return new CUsrMsg_AchievementEvent;
}

void CUsrMsg_AchievementEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievement_ = 0;
    count_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_AchievementEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievement_)));
          set_has_achievement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_AchievementEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 achievement = 1;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achievement(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_AchievementEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 achievement = 1;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achievement(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_AchievementEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievement());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_AchievementEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_AchievementEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_AchievementEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_AchievementEvent::MergeFrom(const CUsrMsg_AchievementEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement()) {
      set_achievement(from.achievement());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_AchievementEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_AchievementEvent::CopyFrom(const CUsrMsg_AchievementEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_AchievementEvent::IsInitialized() const {

  return true;
}

void CUsrMsg_AchievementEvent::Swap(CUsrMsg_AchievementEvent* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    std::swap(count_, other->count_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_AchievementEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_AchievementEvent_descriptor_;
  metadata.reflection = CUsrMsg_AchievementEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_PlayerStatsUpdate_Stat::kIdxFieldNumber;
const int CUsrMsg_PlayerStatsUpdate_Stat::kDeltaFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_PlayerStatsUpdate_Stat::CUsrMsg_PlayerStatsUpdate_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_PlayerStatsUpdate_Stat::InitAsDefaultInstance() {
}

CUsrMsg_PlayerStatsUpdate_Stat::CUsrMsg_PlayerStatsUpdate_Stat(const CUsrMsg_PlayerStatsUpdate_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_PlayerStatsUpdate_Stat::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_PlayerStatsUpdate_Stat::~CUsrMsg_PlayerStatsUpdate_Stat() {
  SharedDtor();
}

void CUsrMsg_PlayerStatsUpdate_Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_PlayerStatsUpdate_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_PlayerStatsUpdate_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_PlayerStatsUpdate_Stat_descriptor_;
}

const CUsrMsg_PlayerStatsUpdate_Stat& CUsrMsg_PlayerStatsUpdate_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_PlayerStatsUpdate_Stat* CUsrMsg_PlayerStatsUpdate_Stat::default_instance_ = NULL;

CUsrMsg_PlayerStatsUpdate_Stat* CUsrMsg_PlayerStatsUpdate_Stat::New() const {
  return new CUsrMsg_PlayerStatsUpdate_Stat;
}

void CUsrMsg_PlayerStatsUpdate_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_PlayerStatsUpdate_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delta;
        break;
      }

      // optional int32 delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_PlayerStatsUpdate_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 delta = 2;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_PlayerStatsUpdate_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // optional int32 delta = 2;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_PlayerStatsUpdate_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_PlayerStatsUpdate_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_PlayerStatsUpdate_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_PlayerStatsUpdate_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_PlayerStatsUpdate_Stat::MergeFrom(const CUsrMsg_PlayerStatsUpdate_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const CUsrMsg_PlayerStatsUpdate_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_PlayerStatsUpdate_Stat::IsInitialized() const {

  return true;
}

void CUsrMsg_PlayerStatsUpdate_Stat::Swap(CUsrMsg_PlayerStatsUpdate_Stat* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_PlayerStatsUpdate_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_PlayerStatsUpdate_Stat_descriptor_;
  metadata.reflection = CUsrMsg_PlayerStatsUpdate_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUsrMsg_PlayerStatsUpdate::kVersionFieldNumber;
const int CUsrMsg_PlayerStatsUpdate::kStatsFieldNumber;
const int CUsrMsg_PlayerStatsUpdate::kUserIdFieldNumber;
const int CUsrMsg_PlayerStatsUpdate::kCrcFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_PlayerStatsUpdate::CUsrMsg_PlayerStatsUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_PlayerStatsUpdate::InitAsDefaultInstance() {
}

CUsrMsg_PlayerStatsUpdate::CUsrMsg_PlayerStatsUpdate(const CUsrMsg_PlayerStatsUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_PlayerStatsUpdate::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  user_id_ = 0;
  crc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_PlayerStatsUpdate::~CUsrMsg_PlayerStatsUpdate() {
  SharedDtor();
}

void CUsrMsg_PlayerStatsUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_PlayerStatsUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_PlayerStatsUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_PlayerStatsUpdate_descriptor_;
}

const CUsrMsg_PlayerStatsUpdate& CUsrMsg_PlayerStatsUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_PlayerStatsUpdate* CUsrMsg_PlayerStatsUpdate::default_instance_ = NULL;

CUsrMsg_PlayerStatsUpdate* CUsrMsg_PlayerStatsUpdate::New() const {
  return new CUsrMsg_PlayerStatsUpdate;
}

void CUsrMsg_PlayerStatsUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    user_id_ = 0;
    crc_ = 0;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_PlayerStatsUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        break;
      }

      // repeated .CUsrMsg_PlayerStatsUpdate.Stat stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_crc;
        break;
      }

      // optional int32 crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_PlayerStatsUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .CUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stats(i), output);
  }

  // optional int32 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_id(), output);
  }

  // optional int32 crc = 6;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_PlayerStatsUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .CUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stats(i), target);
  }

  // optional int32 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_id(), target);
  }

  // optional int32 crc = 6;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_PlayerStatsUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 crc = 6;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crc());
    }

  }
  // repeated .CUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_PlayerStatsUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_PlayerStatsUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_PlayerStatsUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_PlayerStatsUpdate::MergeFrom(const CUsrMsg_PlayerStatsUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_PlayerStatsUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_PlayerStatsUpdate::CopyFrom(const CUsrMsg_PlayerStatsUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_PlayerStatsUpdate::IsInitialized() const {

  return true;
}

void CUsrMsg_PlayerStatsUpdate::Swap(CUsrMsg_PlayerStatsUpdate* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    stats_.Swap(&other->stats_);
    std::swap(user_id_, other->user_id_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_PlayerStatsUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_PlayerStatsUpdate_descriptor_;
  metadata.reflection = CUsrMsg_PlayerStatsUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_CallVoteFailed::kReasonFieldNumber;
const int CUsrMsg_CallVoteFailed::kTimeFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_CallVoteFailed::CUsrMsg_CallVoteFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_CallVoteFailed::InitAsDefaultInstance() {
}

CUsrMsg_CallVoteFailed::CUsrMsg_CallVoteFailed(const CUsrMsg_CallVoteFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_CallVoteFailed::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_CallVoteFailed::~CUsrMsg_CallVoteFailed() {
  SharedDtor();
}

void CUsrMsg_CallVoteFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_CallVoteFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_CallVoteFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_CallVoteFailed_descriptor_;
}

const CUsrMsg_CallVoteFailed& CUsrMsg_CallVoteFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_CallVoteFailed* CUsrMsg_CallVoteFailed::default_instance_ = NULL;

CUsrMsg_CallVoteFailed* CUsrMsg_CallVoteFailed::New() const {
  return new CUsrMsg_CallVoteFailed;
}

void CUsrMsg_CallVoteFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_CallVoteFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_CallVoteFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_CallVoteFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_CallVoteFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_CallVoteFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_CallVoteFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_CallVoteFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_CallVoteFailed::MergeFrom(const CUsrMsg_CallVoteFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_CallVoteFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_CallVoteFailed::CopyFrom(const CUsrMsg_CallVoteFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_CallVoteFailed::IsInitialized() const {

  return true;
}

void CUsrMsg_CallVoteFailed::Swap(CUsrMsg_CallVoteFailed* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_CallVoteFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_CallVoteFailed_descriptor_;
  metadata.reflection = CUsrMsg_CallVoteFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_VoteStart::kTeamFieldNumber;
const int CUsrMsg_VoteStart::kEntIdxFieldNumber;
const int CUsrMsg_VoteStart::kVoteTypeFieldNumber;
const int CUsrMsg_VoteStart::kDispStrFieldNumber;
const int CUsrMsg_VoteStart::kDetailsStrFieldNumber;
const int CUsrMsg_VoteStart::kOtherTeamStrFieldNumber;
const int CUsrMsg_VoteStart::kIsYesNoVoteFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VoteStart::CUsrMsg_VoteStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VoteStart::InitAsDefaultInstance() {
}

CUsrMsg_VoteStart::CUsrMsg_VoteStart(const CUsrMsg_VoteStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VoteStart::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  ent_idx_ = 0;
  vote_type_ = 0;
  disp_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  details_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  other_team_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_yes_no_vote_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VoteStart::~CUsrMsg_VoteStart() {
  SharedDtor();
}

void CUsrMsg_VoteStart::SharedDtor() {
  if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
    delete disp_str_;
  }
  if (details_str_ != &::google::protobuf::internal::kEmptyString) {
    delete details_str_;
  }
  if (other_team_str_ != &::google::protobuf::internal::kEmptyString) {
    delete other_team_str_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_VoteStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VoteStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VoteStart_descriptor_;
}

const CUsrMsg_VoteStart& CUsrMsg_VoteStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VoteStart* CUsrMsg_VoteStart::default_instance_ = NULL;

CUsrMsg_VoteStart* CUsrMsg_VoteStart::New() const {
  return new CUsrMsg_VoteStart;
}

void CUsrMsg_VoteStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    ent_idx_ = 0;
    vote_type_ = 0;
    if (has_disp_str()) {
      if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
        disp_str_->clear();
      }
    }
    if (has_details_str()) {
      if (details_str_ != &::google::protobuf::internal::kEmptyString) {
        details_str_->clear();
      }
    }
    if (has_other_team_str()) {
      if (other_team_str_ != &::google::protobuf::internal::kEmptyString) {
        other_team_str_->clear();
      }
    }
    is_yes_no_vote_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VoteStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ent_idx;
        break;
      }

      // optional int32 ent_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ent_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_idx_)));
          set_has_ent_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vote_type;
        break;
      }

      // optional int32 vote_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_type_)));
          set_has_vote_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disp_str;
        break;
      }

      // optional string disp_str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disp_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disp_str().data(), this->disp_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_details_str;
        break;
      }

      // optional string details_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_str().data(), this->details_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_other_team_str;
        break;
      }

      // optional string other_team_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_team_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_team_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_team_str().data(), this->other_team_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_yes_no_vote;
        break;
      }

      // optional bool is_yes_no_vote = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yes_no_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yes_no_vote_)));
          set_has_is_yes_no_vote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VoteStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // optional int32 ent_idx = 2;
  if (has_ent_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ent_idx(), output);
  }

  // optional int32 vote_type = 3;
  if (has_vote_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vote_type(), output);
  }

  // optional string disp_str = 4;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->disp_str(), output);
  }

  // optional string details_str = 5;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->details_str(), output);
  }

  // optional string other_team_str = 6;
  if (has_other_team_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_team_str().data(), this->other_team_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->other_team_str(), output);
  }

  // optional bool is_yes_no_vote = 7;
  if (has_is_yes_no_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_yes_no_vote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VoteStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // optional int32 ent_idx = 2;
  if (has_ent_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ent_idx(), target);
  }

  // optional int32 vote_type = 3;
  if (has_vote_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vote_type(), target);
  }

  // optional string disp_str = 4;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->disp_str(), target);
  }

  // optional string details_str = 5;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->details_str(), target);
  }

  // optional string other_team_str = 6;
  if (has_other_team_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_team_str().data(), this->other_team_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->other_team_str(), target);
  }

  // optional bool is_yes_no_vote = 7;
  if (has_is_yes_no_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_yes_no_vote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VoteStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // optional int32 ent_idx = 2;
    if (has_ent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_idx());
    }

    // optional int32 vote_type = 3;
    if (has_vote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote_type());
    }

    // optional string disp_str = 4;
    if (has_disp_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disp_str());
    }

    // optional string details_str = 5;
    if (has_details_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_str());
    }

    // optional string other_team_str = 6;
    if (has_other_team_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_team_str());
    }

    // optional bool is_yes_no_vote = 7;
    if (has_is_yes_no_vote()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VoteStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VoteStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VoteStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VoteStart::MergeFrom(const CUsrMsg_VoteStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_ent_idx()) {
      set_ent_idx(from.ent_idx());
    }
    if (from.has_vote_type()) {
      set_vote_type(from.vote_type());
    }
    if (from.has_disp_str()) {
      set_disp_str(from.disp_str());
    }
    if (from.has_details_str()) {
      set_details_str(from.details_str());
    }
    if (from.has_other_team_str()) {
      set_other_team_str(from.other_team_str());
    }
    if (from.has_is_yes_no_vote()) {
      set_is_yes_no_vote(from.is_yes_no_vote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VoteStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VoteStart::CopyFrom(const CUsrMsg_VoteStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VoteStart::IsInitialized() const {

  return true;
}

void CUsrMsg_VoteStart::Swap(CUsrMsg_VoteStart* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(ent_idx_, other->ent_idx_);
    std::swap(vote_type_, other->vote_type_);
    std::swap(disp_str_, other->disp_str_);
    std::swap(details_str_, other->details_str_);
    std::swap(other_team_str_, other->other_team_str_);
    std::swap(is_yes_no_vote_, other->is_yes_no_vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VoteStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VoteStart_descriptor_;
  metadata.reflection = CUsrMsg_VoteStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_VotePass::kTeamFieldNumber;
const int CUsrMsg_VotePass::kVoteTypeFieldNumber;
const int CUsrMsg_VotePass::kDispStrFieldNumber;
const int CUsrMsg_VotePass::kDetailsStrFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VotePass::CUsrMsg_VotePass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VotePass::InitAsDefaultInstance() {
}

CUsrMsg_VotePass::CUsrMsg_VotePass(const CUsrMsg_VotePass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VotePass::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  vote_type_ = 0;
  disp_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  details_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VotePass::~CUsrMsg_VotePass() {
  SharedDtor();
}

void CUsrMsg_VotePass::SharedDtor() {
  if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
    delete disp_str_;
  }
  if (details_str_ != &::google::protobuf::internal::kEmptyString) {
    delete details_str_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_VotePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VotePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VotePass_descriptor_;
}

const CUsrMsg_VotePass& CUsrMsg_VotePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VotePass* CUsrMsg_VotePass::default_instance_ = NULL;

CUsrMsg_VotePass* CUsrMsg_VotePass::New() const {
  return new CUsrMsg_VotePass;
}

void CUsrMsg_VotePass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    vote_type_ = 0;
    if (has_disp_str()) {
      if (disp_str_ != &::google::protobuf::internal::kEmptyString) {
        disp_str_->clear();
      }
    }
    if (has_details_str()) {
      if (details_str_ != &::google::protobuf::internal::kEmptyString) {
        details_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VotePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote_type;
        break;
      }

      // optional int32 vote_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_type_)));
          set_has_vote_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disp_str;
        break;
      }

      // optional string disp_str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disp_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disp_str().data(), this->disp_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_details_str;
        break;
      }

      // optional string details_str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_str().data(), this->details_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VotePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // optional int32 vote_type = 2;
  if (has_vote_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vote_type(), output);
  }

  // optional string disp_str = 3;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->disp_str(), output);
  }

  // optional string details_str = 4;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->details_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VotePass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // optional int32 vote_type = 2;
  if (has_vote_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vote_type(), target);
  }

  // optional string disp_str = 3;
  if (has_disp_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disp_str().data(), this->disp_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disp_str(), target);
  }

  // optional string details_str = 4;
  if (has_details_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_str().data(), this->details_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->details_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VotePass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // optional int32 vote_type = 2;
    if (has_vote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote_type());
    }

    // optional string disp_str = 3;
    if (has_disp_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disp_str());
    }

    // optional string details_str = 4;
    if (has_details_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VotePass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VotePass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VotePass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VotePass::MergeFrom(const CUsrMsg_VotePass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_vote_type()) {
      set_vote_type(from.vote_type());
    }
    if (from.has_disp_str()) {
      set_disp_str(from.disp_str());
    }
    if (from.has_details_str()) {
      set_details_str(from.details_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VotePass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VotePass::CopyFrom(const CUsrMsg_VotePass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VotePass::IsInitialized() const {

  return true;
}

void CUsrMsg_VotePass::Swap(CUsrMsg_VotePass* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(vote_type_, other->vote_type_);
    std::swap(disp_str_, other->disp_str_);
    std::swap(details_str_, other->details_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VotePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VotePass_descriptor_;
  metadata.reflection = CUsrMsg_VotePass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_VoteFailed::kTeamFieldNumber;
const int CUsrMsg_VoteFailed::kReasonFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VoteFailed::CUsrMsg_VoteFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VoteFailed::InitAsDefaultInstance() {
}

CUsrMsg_VoteFailed::CUsrMsg_VoteFailed(const CUsrMsg_VoteFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VoteFailed::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VoteFailed::~CUsrMsg_VoteFailed() {
  SharedDtor();
}

void CUsrMsg_VoteFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_VoteFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VoteFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VoteFailed_descriptor_;
}

const CUsrMsg_VoteFailed& CUsrMsg_VoteFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VoteFailed* CUsrMsg_VoteFailed::default_instance_ = NULL;

CUsrMsg_VoteFailed* CUsrMsg_VoteFailed::New() const {
  return new CUsrMsg_VoteFailed;
}

void CUsrMsg_VoteFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VoteFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional int32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VoteFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VoteFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VoteFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // optional int32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VoteFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VoteFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VoteFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VoteFailed::MergeFrom(const CUsrMsg_VoteFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VoteFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VoteFailed::CopyFrom(const CUsrMsg_VoteFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VoteFailed::IsInitialized() const {

  return true;
}

void CUsrMsg_VoteFailed::Swap(CUsrMsg_VoteFailed* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VoteFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VoteFailed_descriptor_;
  metadata.reflection = CUsrMsg_VoteFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_VoteSetup::kPotentialIssuesFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_VoteSetup::CUsrMsg_VoteSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_VoteSetup::InitAsDefaultInstance() {
}

CUsrMsg_VoteSetup::CUsrMsg_VoteSetup(const CUsrMsg_VoteSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_VoteSetup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_VoteSetup::~CUsrMsg_VoteSetup() {
  SharedDtor();
}

void CUsrMsg_VoteSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_VoteSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_VoteSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_VoteSetup_descriptor_;
}

const CUsrMsg_VoteSetup& CUsrMsg_VoteSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_VoteSetup* CUsrMsg_VoteSetup::default_instance_ = NULL;

CUsrMsg_VoteSetup* CUsrMsg_VoteSetup::New() const {
  return new CUsrMsg_VoteSetup;
}

void CUsrMsg_VoteSetup::Clear() {
  potential_issues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_VoteSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string potential_issues = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_potential_issues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_potential_issues()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->potential_issues(this->potential_issues_size() - 1).data(),
            this->potential_issues(this->potential_issues_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_potential_issues;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_VoteSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string potential_issues = 1;
  for (int i = 0; i < this->potential_issues_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->potential_issues(i).data(), this->potential_issues(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->potential_issues(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_VoteSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string potential_issues = 1;
  for (int i = 0; i < this->potential_issues_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->potential_issues(i).data(), this->potential_issues(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->potential_issues(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_VoteSetup::ByteSize() const {
  int total_size = 0;

  // repeated string potential_issues = 1;
  total_size += 1 * this->potential_issues_size();
  for (int i = 0; i < this->potential_issues_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->potential_issues(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_VoteSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_VoteSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_VoteSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_VoteSetup::MergeFrom(const CUsrMsg_VoteSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  potential_issues_.MergeFrom(from.potential_issues_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_VoteSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_VoteSetup::CopyFrom(const CUsrMsg_VoteSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_VoteSetup::IsInitialized() const {

  return true;
}

void CUsrMsg_VoteSetup::Swap(CUsrMsg_VoteSetup* other) {
  if (other != this) {
    potential_issues_.Swap(&other->potential_issues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_VoteSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_VoteSetup_descriptor_;
  metadata.reflection = CUsrMsg_VoteSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_SendLastKillerDamageToClient::kNumHitsGivenFieldNumber;
const int CUsrMsg_SendLastKillerDamageToClient::kDamageGivenFieldNumber;
const int CUsrMsg_SendLastKillerDamageToClient::kNumHitsTakenFieldNumber;
const int CUsrMsg_SendLastKillerDamageToClient::kDamageTakenFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_SendLastKillerDamageToClient::CUsrMsg_SendLastKillerDamageToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_SendLastKillerDamageToClient::InitAsDefaultInstance() {
}

CUsrMsg_SendLastKillerDamageToClient::CUsrMsg_SendLastKillerDamageToClient(const CUsrMsg_SendLastKillerDamageToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_SendLastKillerDamageToClient::SharedCtor() {
  _cached_size_ = 0;
  num_hits_given_ = 0;
  damage_given_ = 0;
  num_hits_taken_ = 0;
  damage_taken_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_SendLastKillerDamageToClient::~CUsrMsg_SendLastKillerDamageToClient() {
  SharedDtor();
}

void CUsrMsg_SendLastKillerDamageToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_SendLastKillerDamageToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_SendLastKillerDamageToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_SendLastKillerDamageToClient_descriptor_;
}

const CUsrMsg_SendLastKillerDamageToClient& CUsrMsg_SendLastKillerDamageToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_SendLastKillerDamageToClient* CUsrMsg_SendLastKillerDamageToClient::default_instance_ = NULL;

CUsrMsg_SendLastKillerDamageToClient* CUsrMsg_SendLastKillerDamageToClient::New() const {
  return new CUsrMsg_SendLastKillerDamageToClient;
}

void CUsrMsg_SendLastKillerDamageToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_hits_given_ = 0;
    damage_given_ = 0;
    num_hits_taken_ = 0;
    damage_taken_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_SendLastKillerDamageToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_hits_given = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_given_)));
          set_has_num_hits_given();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage_given;
        break;
      }

      // optional int32 damage_given = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_given:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_given_)));
          set_has_damage_given();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_hits_taken;
        break;
      }

      // optional int32 num_hits_taken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_hits_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_taken_)));
          set_has_num_hits_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage_taken;
        break;
      }

      // optional int32 damage_taken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_taken_)));
          set_has_damage_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_SendLastKillerDamageToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_hits_given = 1;
  if (has_num_hits_given()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hits_given(), output);
  }

  // optional int32 damage_given = 2;
  if (has_damage_given()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage_given(), output);
  }

  // optional int32 num_hits_taken = 3;
  if (has_num_hits_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_hits_taken(), output);
  }

  // optional int32 damage_taken = 4;
  if (has_damage_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage_taken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_SendLastKillerDamageToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_hits_given = 1;
  if (has_num_hits_given()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hits_given(), target);
  }

  // optional int32 damage_given = 2;
  if (has_damage_given()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage_given(), target);
  }

  // optional int32 num_hits_taken = 3;
  if (has_num_hits_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_hits_taken(), target);
  }

  // optional int32 damage_taken = 4;
  if (has_damage_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage_taken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_SendLastKillerDamageToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_hits_given = 1;
    if (has_num_hits_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits_given());
    }

    // optional int32 damage_given = 2;
    if (has_damage_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_given());
    }

    // optional int32 num_hits_taken = 3;
    if (has_num_hits_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits_taken());
    }

    // optional int32 damage_taken = 4;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_taken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_SendLastKillerDamageToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_SendLastKillerDamageToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_SendLastKillerDamageToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_SendLastKillerDamageToClient::MergeFrom(const CUsrMsg_SendLastKillerDamageToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_hits_given()) {
      set_num_hits_given(from.num_hits_given());
    }
    if (from.has_damage_given()) {
      set_damage_given(from.damage_given());
    }
    if (from.has_num_hits_taken()) {
      set_num_hits_taken(from.num_hits_taken());
    }
    if (from.has_damage_taken()) {
      set_damage_taken(from.damage_taken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_SendLastKillerDamageToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_SendLastKillerDamageToClient::CopyFrom(const CUsrMsg_SendLastKillerDamageToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_SendLastKillerDamageToClient::IsInitialized() const {

  return true;
}

void CUsrMsg_SendLastKillerDamageToClient::Swap(CUsrMsg_SendLastKillerDamageToClient* other) {
  if (other != this) {
    std::swap(num_hits_given_, other->num_hits_given_);
    std::swap(damage_given_, other->damage_given_);
    std::swap(num_hits_taken_, other->num_hits_taken_);
    std::swap(damage_taken_, other->damage_taken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_SendLastKillerDamageToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_SendLastKillerDamageToClient_descriptor_;
  metadata.reflection = CUsrMsg_SendLastKillerDamageToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_ShowMenu::kBitsValidSlotsFieldNumber;
const int CUsrMsg_ShowMenu::kDisplayTimeFieldNumber;
const int CUsrMsg_ShowMenu::kMenuStringFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_ShowMenu::CUsrMsg_ShowMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_ShowMenu::InitAsDefaultInstance() {
}

CUsrMsg_ShowMenu::CUsrMsg_ShowMenu(const CUsrMsg_ShowMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_ShowMenu::SharedCtor() {
  _cached_size_ = 0;
  bits_valid_slots_ = 0;
  display_time_ = 0;
  menu_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_ShowMenu::~CUsrMsg_ShowMenu() {
  SharedDtor();
}

void CUsrMsg_ShowMenu::SharedDtor() {
  if (menu_string_ != &::google::protobuf::internal::kEmptyString) {
    delete menu_string_;
  }
  if (this != default_instance_) {
  }
}

void CUsrMsg_ShowMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_ShowMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_ShowMenu_descriptor_;
}

const CUsrMsg_ShowMenu& CUsrMsg_ShowMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_ShowMenu* CUsrMsg_ShowMenu::default_instance_ = NULL;

CUsrMsg_ShowMenu* CUsrMsg_ShowMenu::New() const {
  return new CUsrMsg_ShowMenu;
}

void CUsrMsg_ShowMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bits_valid_slots_ = 0;
    display_time_ = 0;
    if (has_menu_string()) {
      if (menu_string_ != &::google::protobuf::internal::kEmptyString) {
        menu_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_ShowMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bits_valid_slots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_valid_slots_)));
          set_has_bits_valid_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_display_time;
        break;
      }

      // optional int32 display_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_time_)));
          set_has_display_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_menu_string;
        break;
      }

      // optional string menu_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menu_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menu_string().data(), this->menu_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_ShowMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bits_valid_slots = 1;
  if (has_bits_valid_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bits_valid_slots(), output);
  }

  // optional int32 display_time = 2;
  if (has_display_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->display_time(), output);
  }

  // optional string menu_string = 3;
  if (has_menu_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu_string().data(), this->menu_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->menu_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_ShowMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bits_valid_slots = 1;
  if (has_bits_valid_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bits_valid_slots(), target);
  }

  // optional int32 display_time = 2;
  if (has_display_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->display_time(), target);
  }

  // optional string menu_string = 3;
  if (has_menu_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu_string().data(), this->menu_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->menu_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_ShowMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bits_valid_slots = 1;
    if (has_bits_valid_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits_valid_slots());
    }

    // optional int32 display_time = 2;
    if (has_display_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_time());
    }

    // optional string menu_string = 3;
    if (has_menu_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menu_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_ShowMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_ShowMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_ShowMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_ShowMenu::MergeFrom(const CUsrMsg_ShowMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bits_valid_slots()) {
      set_bits_valid_slots(from.bits_valid_slots());
    }
    if (from.has_display_time()) {
      set_display_time(from.display_time());
    }
    if (from.has_menu_string()) {
      set_menu_string(from.menu_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_ShowMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_ShowMenu::CopyFrom(const CUsrMsg_ShowMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_ShowMenu::IsInitialized() const {

  return true;
}

void CUsrMsg_ShowMenu::Swap(CUsrMsg_ShowMenu* other) {
  if (other != this) {
    std::swap(bits_valid_slots_, other->bits_valid_slots_);
    std::swap(display_time_, other->display_time_);
    std::swap(menu_string_, other->menu_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_ShowMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_ShowMenu_descriptor_;
  metadata.reflection = CUsrMsg_ShowMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_GlowPropTurnOff::kEntidxFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_GlowPropTurnOff::CUsrMsg_GlowPropTurnOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_GlowPropTurnOff::InitAsDefaultInstance() {
}

CUsrMsg_GlowPropTurnOff::CUsrMsg_GlowPropTurnOff(const CUsrMsg_GlowPropTurnOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_GlowPropTurnOff::SharedCtor() {
  _cached_size_ = 0;
  entidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_GlowPropTurnOff::~CUsrMsg_GlowPropTurnOff() {
  SharedDtor();
}

void CUsrMsg_GlowPropTurnOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_GlowPropTurnOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_GlowPropTurnOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_GlowPropTurnOff_descriptor_;
}

const CUsrMsg_GlowPropTurnOff& CUsrMsg_GlowPropTurnOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_GlowPropTurnOff* CUsrMsg_GlowPropTurnOff::default_instance_ = NULL;

CUsrMsg_GlowPropTurnOff* CUsrMsg_GlowPropTurnOff::New() const {
  return new CUsrMsg_GlowPropTurnOff;
}

void CUsrMsg_GlowPropTurnOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_GlowPropTurnOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entidx_)));
          set_has_entidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_GlowPropTurnOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_GlowPropTurnOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entidx = 1;
  if (has_entidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_GlowPropTurnOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entidx = 1;
    if (has_entidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entidx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_GlowPropTurnOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_GlowPropTurnOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_GlowPropTurnOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_GlowPropTurnOff::MergeFrom(const CUsrMsg_GlowPropTurnOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entidx()) {
      set_entidx(from.entidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_GlowPropTurnOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_GlowPropTurnOff::CopyFrom(const CUsrMsg_GlowPropTurnOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_GlowPropTurnOff::IsInitialized() const {

  return true;
}

void CUsrMsg_GlowPropTurnOff::Swap(CUsrMsg_GlowPropTurnOff* other) {
  if (other != this) {
    std::swap(entidx_, other->entidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_GlowPropTurnOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_GlowPropTurnOff_descriptor_;
  metadata.reflection = CUsrMsg_GlowPropTurnOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_BreakModel::kBreakMsgFieldNumber;
const int CUsrMsg_BreakModel::kModelIdFieldNumber;
const int CUsrMsg_BreakModel::kOriginFieldNumber;
const int CUsrMsg_BreakModel::kAnglesFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_BreakModel::CUsrMsg_BreakModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_BreakModel::InitAsDefaultInstance() {
  origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  angles_ = const_cast< ::CMsgQAngle*>(&::CMsgQAngle::default_instance());
}

CUsrMsg_BreakModel::CUsrMsg_BreakModel(const CUsrMsg_BreakModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_BreakModel::SharedCtor() {
  _cached_size_ = 0;
  break_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_id_ = 0;
  origin_ = NULL;
  angles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_BreakModel::~CUsrMsg_BreakModel() {
  SharedDtor();
}

void CUsrMsg_BreakModel::SharedDtor() {
  if (break_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete break_msg_;
  }
  if (this != default_instance_) {
    delete origin_;
    delete angles_;
  }
}

void CUsrMsg_BreakModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_BreakModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_BreakModel_descriptor_;
}

const CUsrMsg_BreakModel& CUsrMsg_BreakModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_BreakModel* CUsrMsg_BreakModel::default_instance_ = NULL;

CUsrMsg_BreakModel* CUsrMsg_BreakModel::New() const {
  return new CUsrMsg_BreakModel;
}

void CUsrMsg_BreakModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_break_msg()) {
      if (break_msg_ != &::google::protobuf::internal::kEmptyString) {
        break_msg_->clear();
      }
    }
    model_id_ = 0;
    if (has_origin()) {
      if (origin_ != NULL) origin_->::CMsgVector::Clear();
    }
    if (has_angles()) {
      if (angles_ != NULL) angles_->::CMsgQAngle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_BreakModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string break_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_break_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->break_msg().data(), this->break_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_model_id;
        break;
      }

      // optional int32 model_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
          set_has_model_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_origin;
        break;
      }

      // optional .CMsgVector origin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_angles;
        break;
      }

      // optional .CMsgQAngle angles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_angles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_BreakModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string break_msg = 1;
  if (has_break_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->break_msg().data(), this->break_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->break_msg(), output);
  }

  // optional int32 model_id = 2;
  if (has_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model_id(), output);
  }

  // optional .CMsgVector origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->origin(), output);
  }

  // optional .CMsgQAngle angles = 4;
  if (has_angles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->angles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_BreakModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string break_msg = 1;
  if (has_break_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->break_msg().data(), this->break_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->break_msg(), target);
  }

  // optional int32 model_id = 2;
  if (has_model_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model_id(), target);
  }

  // optional .CMsgVector origin = 3;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->origin(), target);
  }

  // optional .CMsgQAngle angles = 4;
  if (has_angles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->angles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_BreakModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string break_msg = 1;
    if (has_break_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->break_msg());
    }

    // optional int32 model_id = 2;
    if (has_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_id());
    }

    // optional .CMsgVector origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional .CMsgQAngle angles = 4;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_BreakModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_BreakModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_BreakModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_BreakModel::MergeFrom(const CUsrMsg_BreakModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_break_msg()) {
      set_break_msg(from.break_msg());
    }
    if (from.has_model_id()) {
      set_model_id(from.model_id());
    }
    if (from.has_origin()) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
    if (from.has_angles()) {
      mutable_angles()->::CMsgQAngle::MergeFrom(from.angles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_BreakModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_BreakModel::CopyFrom(const CUsrMsg_BreakModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_BreakModel::IsInitialized() const {

  return true;
}

void CUsrMsg_BreakModel::Swap(CUsrMsg_BreakModel* other) {
  if (other != this) {
    std::swap(break_msg_, other->break_msg_);
    std::swap(model_id_, other->model_id_);
    std::swap(origin_, other->origin_);
    std::swap(angles_, other->angles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_BreakModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_BreakModel_descriptor_;
  metadata.reflection = CUsrMsg_BreakModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_Damage::kDmgSavedFieldNumber;
const int CUsrMsg_Damage::kDmgTakenFieldNumber;
const int CUsrMsg_Damage::kDmgBitsFieldNumber;
const int CUsrMsg_Damage::kDmgOriginFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_Damage::CUsrMsg_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_Damage::InitAsDefaultInstance() {
  dmg_origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUsrMsg_Damage::CUsrMsg_Damage(const CUsrMsg_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_Damage::SharedCtor() {
  _cached_size_ = 0;
  dmg_saved_ = 0;
  dmg_taken_ = 0;
  dmg_bits_ = 0;
  dmg_origin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_Damage::~CUsrMsg_Damage() {
  SharedDtor();
}

void CUsrMsg_Damage::SharedDtor() {
  if (this != default_instance_) {
    delete dmg_origin_;
  }
}

void CUsrMsg_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_Damage_descriptor_;
}

const CUsrMsg_Damage& CUsrMsg_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_Damage* CUsrMsg_Damage::default_instance_ = NULL;

CUsrMsg_Damage* CUsrMsg_Damage::New() const {
  return new CUsrMsg_Damage;
}

void CUsrMsg_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dmg_saved_ = 0;
    dmg_taken_ = 0;
    dmg_bits_ = 0;
    if (has_dmg_origin()) {
      if (dmg_origin_ != NULL) dmg_origin_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dmg_saved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmg_saved_)));
          set_has_dmg_saved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dmg_taken;
        break;
      }

      // optional int32 dmg_taken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmg_taken_)));
          set_has_dmg_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dmg_bits;
        break;
      }

      // optional int32 dmg_bits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmg_bits_)));
          set_has_dmg_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dmg_origin;
        break;
      }

      // optional .CMsgVector dmg_origin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dmg_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dmg_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dmg_saved = 1;
  if (has_dmg_saved()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dmg_saved(), output);
  }

  // optional int32 dmg_taken = 2;
  if (has_dmg_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dmg_taken(), output);
  }

  // optional int32 dmg_bits = 3;
  if (has_dmg_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dmg_bits(), output);
  }

  // optional .CMsgVector dmg_origin = 4;
  if (has_dmg_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dmg_origin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dmg_saved = 1;
  if (has_dmg_saved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dmg_saved(), target);
  }

  // optional int32 dmg_taken = 2;
  if (has_dmg_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dmg_taken(), target);
  }

  // optional int32 dmg_bits = 3;
  if (has_dmg_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dmg_bits(), target);
  }

  // optional .CMsgVector dmg_origin = 4;
  if (has_dmg_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dmg_origin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_Damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dmg_saved = 1;
    if (has_dmg_saved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmg_saved());
    }

    // optional int32 dmg_taken = 2;
    if (has_dmg_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmg_taken());
    }

    // optional int32 dmg_bits = 3;
    if (has_dmg_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmg_bits());
    }

    // optional .CMsgVector dmg_origin = 4;
    if (has_dmg_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dmg_origin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_Damage::MergeFrom(const CUsrMsg_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dmg_saved()) {
      set_dmg_saved(from.dmg_saved());
    }
    if (from.has_dmg_taken()) {
      set_dmg_taken(from.dmg_taken());
    }
    if (from.has_dmg_bits()) {
      set_dmg_bits(from.dmg_bits());
    }
    if (from.has_dmg_origin()) {
      mutable_dmg_origin()->::CMsgVector::MergeFrom(from.dmg_origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_Damage::CopyFrom(const CUsrMsg_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_Damage::IsInitialized() const {

  return true;
}

void CUsrMsg_Damage::Swap(CUsrMsg_Damage* other) {
  if (other != this) {
    std::swap(dmg_saved_, other->dmg_saved_);
    std::swap(dmg_taken_, other->dmg_taken_);
    std::swap(dmg_bits_, other->dmg_bits_);
    std::swap(dmg_origin_, other->dmg_origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_Damage_descriptor_;
  metadata.reflection = CUsrMsg_Damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_ExtVote_Option::kIdFieldNumber;
const int CJBUsrMsg_ExtVote_Option::kVotesFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_ExtVote_Option::CJBUsrMsg_ExtVote_Option()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_ExtVote_Option::InitAsDefaultInstance() {
}

CJBUsrMsg_ExtVote_Option::CJBUsrMsg_ExtVote_Option(const CJBUsrMsg_ExtVote_Option& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_ExtVote_Option::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  votes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_ExtVote_Option::~CJBUsrMsg_ExtVote_Option() {
  SharedDtor();
}

void CJBUsrMsg_ExtVote_Option::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void CJBUsrMsg_ExtVote_Option::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_ExtVote_Option::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_ExtVote_Option_descriptor_;
}

const CJBUsrMsg_ExtVote_Option& CJBUsrMsg_ExtVote_Option::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_ExtVote_Option* CJBUsrMsg_ExtVote_Option::default_instance_ = NULL;

CJBUsrMsg_ExtVote_Option* CJBUsrMsg_ExtVote_Option::New() const {
  return new CJBUsrMsg_ExtVote_Option;
}

void CJBUsrMsg_ExtVote_Option::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    votes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_ExtVote_Option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_votes;
        break;
      }

      // optional uint32 votes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votes_)));
          set_has_votes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_ExtVote_Option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional uint32 votes = 2;
  if (has_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->votes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_ExtVote_Option::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint32 votes = 2;
  if (has_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->votes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_ExtVote_Option::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint32 votes = 2;
    if (has_votes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_ExtVote_Option::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_ExtVote_Option* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_ExtVote_Option*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_ExtVote_Option::MergeFrom(const CJBUsrMsg_ExtVote_Option& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_votes()) {
      set_votes(from.votes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_ExtVote_Option::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_ExtVote_Option::CopyFrom(const CJBUsrMsg_ExtVote_Option& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_ExtVote_Option::IsInitialized() const {

  return true;
}

void CJBUsrMsg_ExtVote_Option::Swap(CJBUsrMsg_ExtVote_Option* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(votes_, other->votes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_ExtVote_Option::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_ExtVote_Option_descriptor_;
  metadata.reflection = CJBUsrMsg_ExtVote_Option_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_ExtVoteStateChange::kStateFieldNumber;
const int CJBUsrMsg_ExtVoteStateChange::kTimeOffsetFieldNumber;
const int CJBUsrMsg_ExtVoteStateChange::kOptionsFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_ExtVoteStateChange::CJBUsrMsg_ExtVoteStateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_ExtVoteStateChange::InitAsDefaultInstance() {
}

CJBUsrMsg_ExtVoteStateChange::CJBUsrMsg_ExtVoteStateChange(const CJBUsrMsg_ExtVoteStateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_ExtVoteStateChange::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  time_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_ExtVoteStateChange::~CJBUsrMsg_ExtVoteStateChange() {
  SharedDtor();
}

void CJBUsrMsg_ExtVoteStateChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CJBUsrMsg_ExtVoteStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_ExtVoteStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_ExtVoteStateChange_descriptor_;
}

const CJBUsrMsg_ExtVoteStateChange& CJBUsrMsg_ExtVoteStateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_ExtVoteStateChange* CJBUsrMsg_ExtVoteStateChange::default_instance_ = NULL;

CJBUsrMsg_ExtVoteStateChange* CJBUsrMsg_ExtVoteStateChange::New() const {
  return new CJBUsrMsg_ExtVoteStateChange;
}

void CJBUsrMsg_ExtVoteStateChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    time_offset_ = 0;
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_ExtVoteStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_time_offset;
        break;
      }

      // optional float time_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_offset_)));
          set_has_time_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }

      // repeated .CJBUsrMsg_ExtVote_Option options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_options;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_ExtVoteStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional float time_offset = 2;
  if (has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_offset(), output);
  }

  // repeated .CJBUsrMsg_ExtVote_Option options = 3;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->options(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_ExtVoteStateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional float time_offset = 2;
  if (has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_offset(), target);
  }

  // repeated .CJBUsrMsg_ExtVote_Option options = 3;
  for (int i = 0; i < this->options_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->options(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_ExtVoteStateChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional float time_offset = 2;
    if (has_time_offset()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CJBUsrMsg_ExtVote_Option options = 3;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->options(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_ExtVoteStateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_ExtVoteStateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_ExtVoteStateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_ExtVoteStateChange::MergeFrom(const CJBUsrMsg_ExtVoteStateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time_offset()) {
      set_time_offset(from.time_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_ExtVoteStateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_ExtVoteStateChange::CopyFrom(const CJBUsrMsg_ExtVoteStateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_ExtVoteStateChange::IsInitialized() const {

  return true;
}

void CJBUsrMsg_ExtVoteStateChange::Swap(CJBUsrMsg_ExtVoteStateChange* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(time_offset_, other->time_offset_);
    options_.Swap(&other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_ExtVoteStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_ExtVoteStateChange_descriptor_;
  metadata.reflection = CJBUsrMsg_ExtVoteStateChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_ExtVoteUpdate::kOptionFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_ExtVoteUpdate::CJBUsrMsg_ExtVoteUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_ExtVoteUpdate::InitAsDefaultInstance() {
  option_ = const_cast< ::CJBUsrMsg_ExtVote_Option*>(&::CJBUsrMsg_ExtVote_Option::default_instance());
}

CJBUsrMsg_ExtVoteUpdate::CJBUsrMsg_ExtVoteUpdate(const CJBUsrMsg_ExtVoteUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_ExtVoteUpdate::SharedCtor() {
  _cached_size_ = 0;
  option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_ExtVoteUpdate::~CJBUsrMsg_ExtVoteUpdate() {
  SharedDtor();
}

void CJBUsrMsg_ExtVoteUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete option_;
  }
}

void CJBUsrMsg_ExtVoteUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_ExtVoteUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_ExtVoteUpdate_descriptor_;
}

const CJBUsrMsg_ExtVoteUpdate& CJBUsrMsg_ExtVoteUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_ExtVoteUpdate* CJBUsrMsg_ExtVoteUpdate::default_instance_ = NULL;

CJBUsrMsg_ExtVoteUpdate* CJBUsrMsg_ExtVoteUpdate::New() const {
  return new CJBUsrMsg_ExtVoteUpdate;
}

void CJBUsrMsg_ExtVoteUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_option()) {
      if (option_ != NULL) option_->::CJBUsrMsg_ExtVote_Option::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_ExtVoteUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CJBUsrMsg_ExtVote_Option option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_ExtVoteUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CJBUsrMsg_ExtVote_Option option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_ExtVoteUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CJBUsrMsg_ExtVote_Option option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_ExtVoteUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CJBUsrMsg_ExtVote_Option option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->option());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_ExtVoteUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_ExtVoteUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_ExtVoteUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_ExtVoteUpdate::MergeFrom(const CJBUsrMsg_ExtVoteUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      mutable_option()->::CJBUsrMsg_ExtVote_Option::MergeFrom(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_ExtVoteUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_ExtVoteUpdate::CopyFrom(const CJBUsrMsg_ExtVoteUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_ExtVoteUpdate::IsInitialized() const {

  return true;
}

void CJBUsrMsg_ExtVoteUpdate::Swap(CJBUsrMsg_ExtVoteUpdate* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_ExtVoteUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_ExtVoteUpdate_descriptor_;
  metadata.reflection = CJBUsrMsg_ExtVoteUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::kModelNameFieldNumber;
const int CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::kAnimSequenceFieldNumber;
const int CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::kWeaponModelFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::InitAsDefaultInstance() {
}

CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel(const CJBUsrMsg_ShowRoundIntro_CRoundIntroModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  anim_sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weapon_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::~CJBUsrMsg_ShowRoundIntro_CRoundIntroModel() {
  SharedDtor();
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::kEmptyString) {
    delete model_name_;
  }
  if (anim_sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete anim_sequence_;
  }
  if (weapon_model_ != &::google::protobuf::internal::kEmptyString) {
    delete weapon_model_;
  }
  if (this != default_instance_) {
  }
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_descriptor_;
}

const CJBUsrMsg_ShowRoundIntro_CRoundIntroModel& CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_ShowRoundIntro_CRoundIntroModel* CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance_ = NULL;

CJBUsrMsg_ShowRoundIntro_CRoundIntroModel* CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::New() const {
  return new CJBUsrMsg_ShowRoundIntro_CRoundIntroModel;
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::kEmptyString) {
        model_name_->clear();
      }
    }
    if (has_anim_sequence()) {
      if (anim_sequence_ != &::google::protobuf::internal::kEmptyString) {
        anim_sequence_->clear();
      }
    }
    if (has_weapon_model()) {
      if (weapon_model_ != &::google::protobuf::internal::kEmptyString) {
        weapon_model_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_anim_sequence;
        break;
      }

      // optional string anim_sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anim_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anim_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anim_sequence().data(), this->anim_sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weapon_model;
        break;
      }

      // optional string weapon_model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weapon_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weapon_model().data(), this->weapon_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // optional string anim_sequence = 2;
  if (has_anim_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anim_sequence().data(), this->anim_sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->anim_sequence(), output);
  }

  // optional string weapon_model = 3;
  if (has_weapon_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weapon_model().data(), this->weapon_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->weapon_model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string anim_sequence = 2;
  if (has_anim_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anim_sequence().data(), this->anim_sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->anim_sequence(), target);
  }

  // optional string weapon_model = 3;
  if (has_weapon_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weapon_model().data(), this->weapon_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weapon_model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string anim_sequence = 2;
    if (has_anim_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anim_sequence());
    }

    // optional string weapon_model = 3;
    if (has_weapon_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weapon_model());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_ShowRoundIntro_CRoundIntroModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_ShowRoundIntro_CRoundIntroModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::MergeFrom(const CJBUsrMsg_ShowRoundIntro_CRoundIntroModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_anim_sequence()) {
      set_anim_sequence(from.anim_sequence());
    }
    if (from.has_weapon_model()) {
      set_weapon_model(from.weapon_model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::CopyFrom(const CJBUsrMsg_ShowRoundIntro_CRoundIntroModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::IsInitialized() const {

  return true;
}

void CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::Swap(CJBUsrMsg_ShowRoundIntro_CRoundIntroModel* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(anim_sequence_, other->anim_sequence_);
    std::swap(weapon_model_, other->weapon_model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_descriptor_;
  metadata.reflection = CJBUsrMsg_ShowRoundIntro_CRoundIntroModel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CJBUsrMsg_ShowRoundIntro::kTeamNumFieldNumber;
const int CJBUsrMsg_ShowRoundIntro::kTitleFieldNumber;
const int CJBUsrMsg_ShowRoundIntro::kDescriptionFieldNumber;
const int CJBUsrMsg_ShowRoundIntro::kTextColorFieldNumber;
const int CJBUsrMsg_ShowRoundIntro::kModel1FieldNumber;
const int CJBUsrMsg_ShowRoundIntro::kModel2FieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_ShowRoundIntro::CJBUsrMsg_ShowRoundIntro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_ShowRoundIntro::InitAsDefaultInstance() {
  text_color_ = const_cast< ::CMsgRGBA*>(&::CMsgRGBA::default_instance());
  model1_ = const_cast< ::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel*>(&::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance());
  model2_ = const_cast< ::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel*>(&::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::default_instance());
}

CJBUsrMsg_ShowRoundIntro::CJBUsrMsg_ShowRoundIntro(const CJBUsrMsg_ShowRoundIntro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_ShowRoundIntro::SharedCtor() {
  _cached_size_ = 0;
  team_num_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_color_ = NULL;
  model1_ = NULL;
  model2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_ShowRoundIntro::~CJBUsrMsg_ShowRoundIntro() {
  SharedDtor();
}

void CJBUsrMsg_ShowRoundIntro::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete text_color_;
    delete model1_;
    delete model2_;
  }
}

void CJBUsrMsg_ShowRoundIntro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_ShowRoundIntro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_ShowRoundIntro_descriptor_;
}

const CJBUsrMsg_ShowRoundIntro& CJBUsrMsg_ShowRoundIntro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_ShowRoundIntro* CJBUsrMsg_ShowRoundIntro::default_instance_ = NULL;

CJBUsrMsg_ShowRoundIntro* CJBUsrMsg_ShowRoundIntro::New() const {
  return new CJBUsrMsg_ShowRoundIntro;
}

void CJBUsrMsg_ShowRoundIntro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_num_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_text_color()) {
      if (text_color_ != NULL) text_color_->::CMsgRGBA::Clear();
    }
    if (has_model1()) {
      if (model1_ != NULL) model1_->::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::Clear();
    }
    if (has_model2()) {
      if (model2_ != NULL) model2_->::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_ShowRoundIntro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_num_)));
          set_has_team_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text_color;
        break;
      }

      // optional .CMsgRGBA text_color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model1;
        break;
      }

      // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_model2;
        break;
      }

      // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_ShowRoundIntro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team_num = 1;
  if (has_team_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_num(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // optional .CMsgRGBA text_color = 4;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text_color(), output);
  }

  // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model1 = 5;
  if (has_model1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->model1(), output);
  }

  // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model2 = 6;
  if (has_model2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->model2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_ShowRoundIntro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team_num = 1;
  if (has_team_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_num(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional .CMsgRGBA text_color = 4;
  if (has_text_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text_color(), target);
  }

  // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model1 = 5;
  if (has_model1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->model1(), target);
  }

  // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model2 = 6;
  if (has_model2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->model2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_ShowRoundIntro::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_num = 1;
    if (has_team_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_num());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .CMsgRGBA text_color = 4;
    if (has_text_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_color());
    }

    // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model1 = 5;
    if (has_model1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model1());
    }

    // optional .CJBUsrMsg_ShowRoundIntro.CRoundIntroModel model2 = 6;
    if (has_model2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_ShowRoundIntro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_ShowRoundIntro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_ShowRoundIntro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_ShowRoundIntro::MergeFrom(const CJBUsrMsg_ShowRoundIntro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_num()) {
      set_team_num(from.team_num());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_text_color()) {
      mutable_text_color()->::CMsgRGBA::MergeFrom(from.text_color());
    }
    if (from.has_model1()) {
      mutable_model1()->::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::MergeFrom(from.model1());
    }
    if (from.has_model2()) {
      mutable_model2()->::CJBUsrMsg_ShowRoundIntro_CRoundIntroModel::MergeFrom(from.model2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_ShowRoundIntro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_ShowRoundIntro::CopyFrom(const CJBUsrMsg_ShowRoundIntro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_ShowRoundIntro::IsInitialized() const {

  return true;
}

void CJBUsrMsg_ShowRoundIntro::Swap(CJBUsrMsg_ShowRoundIntro* other) {
  if (other != this) {
    std::swap(team_num_, other->team_num_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(text_color_, other->text_color_);
    std::swap(model1_, other->model1_);
    std::swap(model2_, other->model2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_ShowRoundIntro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_ShowRoundIntro_descriptor_;
  metadata.reflection = CJBUsrMsg_ShowRoundIntro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_DeathNotice::kVictimIndexFieldNumber;
const int CJBUsrMsg_DeathNotice::kScorerIndexFieldNumber;
const int CJBUsrMsg_DeathNotice::kAssisterIndexFieldNumber;
const int CJBUsrMsg_DeathNotice::kKillerWeaponFieldNumber;
const int CJBUsrMsg_DeathNotice::kWeaponIdFieldNumber;
const int CJBUsrMsg_DeathNotice::kDamageTypeFieldNumber;
const int CJBUsrMsg_DeathNotice::kCustomKillFieldNumber;
const int CJBUsrMsg_DeathNotice::kBodyGroupFieldNumber;
const int CJBUsrMsg_DeathNotice::kCreditAssisterFieldNumber;
const int CJBUsrMsg_DeathNotice::kVictimTeamnumFieldNumber;
const int CJBUsrMsg_DeathNotice::kKillerTeamnumFieldNumber;
const int CJBUsrMsg_DeathNotice::kAssisterTeamnumFieldNumber;
const int CJBUsrMsg_DeathNotice::kKillerCnameFieldNumber;
const int CJBUsrMsg_DeathNotice::kAssisterCnameFieldNumber;
const int CJBUsrMsg_DeathNotice::kVictimCnameFieldNumber;
const int CJBUsrMsg_DeathNotice::kKillStreakFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_DeathNotice::CJBUsrMsg_DeathNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_DeathNotice::InitAsDefaultInstance() {
}

CJBUsrMsg_DeathNotice::CJBUsrMsg_DeathNotice(const CJBUsrMsg_DeathNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_DeathNotice::SharedCtor() {
  _cached_size_ = 0;
  victim_index_ = 0;
  scorer_index_ = 0;
  assister_index_ = 0;
  killer_weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weapon_id_ = 0;
  damage_type_ = 0;
  custom_kill_ = 0;
  body_group_ = 0;
  credit_assister_ = false;
  victim_teamnum_ = 0;
  killer_teamnum_ = 0;
  assister_teamnum_ = 0;
  killer_cname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assister_cname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  victim_cname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kill_streak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_DeathNotice::~CJBUsrMsg_DeathNotice() {
  SharedDtor();
}

void CJBUsrMsg_DeathNotice::SharedDtor() {
  if (killer_weapon_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_weapon_;
  }
  if (killer_cname_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_cname_;
  }
  if (assister_cname_ != &::google::protobuf::internal::kEmptyString) {
    delete assister_cname_;
  }
  if (victim_cname_ != &::google::protobuf::internal::kEmptyString) {
    delete victim_cname_;
  }
  if (this != default_instance_) {
  }
}

void CJBUsrMsg_DeathNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_DeathNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_DeathNotice_descriptor_;
}

const CJBUsrMsg_DeathNotice& CJBUsrMsg_DeathNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_DeathNotice* CJBUsrMsg_DeathNotice::default_instance_ = NULL;

CJBUsrMsg_DeathNotice* CJBUsrMsg_DeathNotice::New() const {
  return new CJBUsrMsg_DeathNotice;
}

void CJBUsrMsg_DeathNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    victim_index_ = 0;
    scorer_index_ = 0;
    assister_index_ = 0;
    if (has_killer_weapon()) {
      if (killer_weapon_ != &::google::protobuf::internal::kEmptyString) {
        killer_weapon_->clear();
      }
    }
    weapon_id_ = 0;
    damage_type_ = 0;
    custom_kill_ = 0;
    body_group_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    credit_assister_ = false;
    victim_teamnum_ = 0;
    killer_teamnum_ = 0;
    assister_teamnum_ = 0;
    if (has_killer_cname()) {
      if (killer_cname_ != &::google::protobuf::internal::kEmptyString) {
        killer_cname_->clear();
      }
    }
    if (has_assister_cname()) {
      if (assister_cname_ != &::google::protobuf::internal::kEmptyString) {
        assister_cname_->clear();
      }
    }
    if (has_victim_cname()) {
      if (victim_cname_ != &::google::protobuf::internal::kEmptyString) {
        victim_cname_->clear();
      }
    }
    kill_streak_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_DeathNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 victim_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victim_index_)));
          set_has_victim_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scorer_index;
        break;
      }

      // optional int32 scorer_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scorer_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scorer_index_)));
          set_has_scorer_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_assister_index;
        break;
      }

      // optional int32 assister_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assister_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assister_index_)));
          set_has_assister_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_killer_weapon;
        break;
      }

      // optional string killer_weapon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer_weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer_weapon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer_weapon().data(), this->killer_weapon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weapon_id;
        break;
      }

      // optional int32 weapon_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_damage_type;
        break;
      }

      // optional int32 damage_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_type_)));
          set_has_damage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_custom_kill;
        break;
      }

      // optional int32 custom_kill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &custom_kill_)));
          set_has_custom_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_body_group;
        break;
      }

      // optional int32 body_group = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &body_group_)));
          set_has_body_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_credit_assister;
        break;
      }

      // optional bool credit_assister = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit_assister:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &credit_assister_)));
          set_has_credit_assister();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_victim_teamnum;
        break;
      }

      // optional int32 victim_teamnum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victim_teamnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victim_teamnum_)));
          set_has_victim_teamnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_killer_teamnum;
        break;
      }

      // optional int32 killer_teamnum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_teamnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killer_teamnum_)));
          set_has_killer_teamnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_assister_teamnum;
        break;
      }

      // optional int32 assister_teamnum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assister_teamnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assister_teamnum_)));
          set_has_assister_teamnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_killer_cname;
        break;
      }

      // optional string killer_cname = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer_cname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer_cname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer_cname().data(), this->killer_cname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_assister_cname;
        break;
      }

      // optional string assister_cname = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assister_cname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assister_cname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assister_cname().data(), this->assister_cname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_victim_cname;
        break;
      }

      // optional string victim_cname = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_victim_cname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_victim_cname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->victim_cname().data(), this->victim_cname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_kill_streak;
        break;
      }

      // optional int32 kill_streak = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_streak_)));
          set_has_kill_streak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_DeathNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 victim_index = 1;
  if (has_victim_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->victim_index(), output);
  }

  // optional int32 scorer_index = 2;
  if (has_scorer_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scorer_index(), output);
  }

  // optional int32 assister_index = 3;
  if (has_assister_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->assister_index(), output);
  }

  // optional string killer_weapon = 4;
  if (has_killer_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_weapon().data(), this->killer_weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->killer_weapon(), output);
  }

  // optional int32 weapon_id = 5;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->weapon_id(), output);
  }

  // optional int32 damage_type = 6;
  if (has_damage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->damage_type(), output);
  }

  // optional int32 custom_kill = 7;
  if (has_custom_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->custom_kill(), output);
  }

  // optional int32 body_group = 8;
  if (has_body_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->body_group(), output);
  }

  // optional bool credit_assister = 9;
  if (has_credit_assister()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->credit_assister(), output);
  }

  // optional int32 victim_teamnum = 10;
  if (has_victim_teamnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->victim_teamnum(), output);
  }

  // optional int32 killer_teamnum = 11;
  if (has_killer_teamnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->killer_teamnum(), output);
  }

  // optional int32 assister_teamnum = 12;
  if (has_assister_teamnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->assister_teamnum(), output);
  }

  // optional string killer_cname = 13;
  if (has_killer_cname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_cname().data(), this->killer_cname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->killer_cname(), output);
  }

  // optional string assister_cname = 14;
  if (has_assister_cname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assister_cname().data(), this->assister_cname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->assister_cname(), output);
  }

  // optional string victim_cname = 15;
  if (has_victim_cname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->victim_cname().data(), this->victim_cname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->victim_cname(), output);
  }

  // optional int32 kill_streak = 16;
  if (has_kill_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->kill_streak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_DeathNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 victim_index = 1;
  if (has_victim_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->victim_index(), target);
  }

  // optional int32 scorer_index = 2;
  if (has_scorer_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scorer_index(), target);
  }

  // optional int32 assister_index = 3;
  if (has_assister_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->assister_index(), target);
  }

  // optional string killer_weapon = 4;
  if (has_killer_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_weapon().data(), this->killer_weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->killer_weapon(), target);
  }

  // optional int32 weapon_id = 5;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->weapon_id(), target);
  }

  // optional int32 damage_type = 6;
  if (has_damage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->damage_type(), target);
  }

  // optional int32 custom_kill = 7;
  if (has_custom_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->custom_kill(), target);
  }

  // optional int32 body_group = 8;
  if (has_body_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->body_group(), target);
  }

  // optional bool credit_assister = 9;
  if (has_credit_assister()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->credit_assister(), target);
  }

  // optional int32 victim_teamnum = 10;
  if (has_victim_teamnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->victim_teamnum(), target);
  }

  // optional int32 killer_teamnum = 11;
  if (has_killer_teamnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->killer_teamnum(), target);
  }

  // optional int32 assister_teamnum = 12;
  if (has_assister_teamnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->assister_teamnum(), target);
  }

  // optional string killer_cname = 13;
  if (has_killer_cname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_cname().data(), this->killer_cname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->killer_cname(), target);
  }

  // optional string assister_cname = 14;
  if (has_assister_cname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assister_cname().data(), this->assister_cname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->assister_cname(), target);
  }

  // optional string victim_cname = 15;
  if (has_victim_cname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->victim_cname().data(), this->victim_cname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->victim_cname(), target);
  }

  // optional int32 kill_streak = 16;
  if (has_kill_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->kill_streak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_DeathNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 victim_index = 1;
    if (has_victim_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victim_index());
    }

    // optional int32 scorer_index = 2;
    if (has_scorer_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scorer_index());
    }

    // optional int32 assister_index = 3;
    if (has_assister_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assister_index());
    }

    // optional string killer_weapon = 4;
    if (has_killer_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer_weapon());
    }

    // optional int32 weapon_id = 5;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_id());
    }

    // optional int32 damage_type = 6;
    if (has_damage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_type());
    }

    // optional int32 custom_kill = 7;
    if (has_custom_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->custom_kill());
    }

    // optional int32 body_group = 8;
    if (has_body_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->body_group());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool credit_assister = 9;
    if (has_credit_assister()) {
      total_size += 1 + 1;
    }

    // optional int32 victim_teamnum = 10;
    if (has_victim_teamnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victim_teamnum());
    }

    // optional int32 killer_teamnum = 11;
    if (has_killer_teamnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killer_teamnum());
    }

    // optional int32 assister_teamnum = 12;
    if (has_assister_teamnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assister_teamnum());
    }

    // optional string killer_cname = 13;
    if (has_killer_cname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer_cname());
    }

    // optional string assister_cname = 14;
    if (has_assister_cname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assister_cname());
    }

    // optional string victim_cname = 15;
    if (has_victim_cname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->victim_cname());
    }

    // optional int32 kill_streak = 16;
    if (has_kill_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_streak());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_DeathNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_DeathNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_DeathNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_DeathNotice::MergeFrom(const CJBUsrMsg_DeathNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victim_index()) {
      set_victim_index(from.victim_index());
    }
    if (from.has_scorer_index()) {
      set_scorer_index(from.scorer_index());
    }
    if (from.has_assister_index()) {
      set_assister_index(from.assister_index());
    }
    if (from.has_killer_weapon()) {
      set_killer_weapon(from.killer_weapon());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_damage_type()) {
      set_damage_type(from.damage_type());
    }
    if (from.has_custom_kill()) {
      set_custom_kill(from.custom_kill());
    }
    if (from.has_body_group()) {
      set_body_group(from.body_group());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_credit_assister()) {
      set_credit_assister(from.credit_assister());
    }
    if (from.has_victim_teamnum()) {
      set_victim_teamnum(from.victim_teamnum());
    }
    if (from.has_killer_teamnum()) {
      set_killer_teamnum(from.killer_teamnum());
    }
    if (from.has_assister_teamnum()) {
      set_assister_teamnum(from.assister_teamnum());
    }
    if (from.has_killer_cname()) {
      set_killer_cname(from.killer_cname());
    }
    if (from.has_assister_cname()) {
      set_assister_cname(from.assister_cname());
    }
    if (from.has_victim_cname()) {
      set_victim_cname(from.victim_cname());
    }
    if (from.has_kill_streak()) {
      set_kill_streak(from.kill_streak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_DeathNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_DeathNotice::CopyFrom(const CJBUsrMsg_DeathNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_DeathNotice::IsInitialized() const {

  return true;
}

void CJBUsrMsg_DeathNotice::Swap(CJBUsrMsg_DeathNotice* other) {
  if (other != this) {
    std::swap(victim_index_, other->victim_index_);
    std::swap(scorer_index_, other->scorer_index_);
    std::swap(assister_index_, other->assister_index_);
    std::swap(killer_weapon_, other->killer_weapon_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(damage_type_, other->damage_type_);
    std::swap(custom_kill_, other->custom_kill_);
    std::swap(body_group_, other->body_group_);
    std::swap(credit_assister_, other->credit_assister_);
    std::swap(victim_teamnum_, other->victim_teamnum_);
    std::swap(killer_teamnum_, other->killer_teamnum_);
    std::swap(assister_teamnum_, other->assister_teamnum_);
    std::swap(killer_cname_, other->killer_cname_);
    std::swap(assister_cname_, other->assister_cname_);
    std::swap(victim_cname_, other->victim_cname_);
    std::swap(kill_streak_, other->kill_streak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_DeathNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_DeathNotice_descriptor_;
  metadata.reflection = CJBUsrMsg_DeathNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_PlayerSpree::kPlayerIndexFieldNumber;
const int CJBUsrMsg_PlayerSpree::kStreakFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_PlayerSpree::CJBUsrMsg_PlayerSpree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_PlayerSpree::InitAsDefaultInstance() {
}

CJBUsrMsg_PlayerSpree::CJBUsrMsg_PlayerSpree(const CJBUsrMsg_PlayerSpree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_PlayerSpree::SharedCtor() {
  _cached_size_ = 0;
  player_index_ = 0;
  streak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_PlayerSpree::~CJBUsrMsg_PlayerSpree() {
  SharedDtor();
}

void CJBUsrMsg_PlayerSpree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CJBUsrMsg_PlayerSpree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_PlayerSpree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_PlayerSpree_descriptor_;
}

const CJBUsrMsg_PlayerSpree& CJBUsrMsg_PlayerSpree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_PlayerSpree* CJBUsrMsg_PlayerSpree::default_instance_ = NULL;

CJBUsrMsg_PlayerSpree* CJBUsrMsg_PlayerSpree::New() const {
  return new CJBUsrMsg_PlayerSpree;
}

void CJBUsrMsg_PlayerSpree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_index_ = 0;
    streak_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_PlayerSpree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
          set_has_player_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_streak;
        break;
      }

      // optional int32 streak = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streak_)));
          set_has_streak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_PlayerSpree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_index = 1;
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_index(), output);
  }

  // optional int32 streak = 2;
  if (has_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->streak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_PlayerSpree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_index = 1;
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_index(), target);
  }

  // optional int32 streak = 2;
  if (has_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->streak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_PlayerSpree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_index = 1;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }

    // optional int32 streak = 2;
    if (has_streak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streak());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_PlayerSpree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_PlayerSpree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_PlayerSpree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_PlayerSpree::MergeFrom(const CJBUsrMsg_PlayerSpree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
    if (from.has_streak()) {
      set_streak(from.streak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_PlayerSpree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_PlayerSpree::CopyFrom(const CJBUsrMsg_PlayerSpree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_PlayerSpree::IsInitialized() const {

  return true;
}

void CJBUsrMsg_PlayerSpree::Swap(CJBUsrMsg_PlayerSpree* other) {
  if (other != this) {
    std::swap(player_index_, other->player_index_);
    std::swap(streak_, other->streak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_PlayerSpree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_PlayerSpree_descriptor_;
  metadata.reflection = CJBUsrMsg_PlayerSpree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_SVTUpdate::kAlertStateFieldNumber;
const int CJBUsrMsg_SVTUpdate::kAlertTimeRemainingFieldNumber;
const int CJBUsrMsg_SVTUpdate::kAlertTimeTotalFieldNumber;
const int CJBUsrMsg_SVTUpdate::kLastAlertStateChangeFieldNumber;
const int CJBUsrMsg_SVTUpdate::kLastBackupDispatchFieldNumber;
const int CJBUsrMsg_SVTUpdate::kTerroristsOnStartFieldNumber;
const int CJBUsrMsg_SVTUpdate::kSneaksOnStartFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_SVTUpdate::CJBUsrMsg_SVTUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_SVTUpdate::InitAsDefaultInstance() {
}

CJBUsrMsg_SVTUpdate::CJBUsrMsg_SVTUpdate(const CJBUsrMsg_SVTUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_SVTUpdate::SharedCtor() {
  _cached_size_ = 0;
  alert_state_ = 0;
  alert_time_remaining_ = 0;
  alert_time_total_ = 0;
  last_alert_state_change_ = 0;
  last_backup_dispatch_ = 0;
  terrorists_on_start_ = 0;
  sneaks_on_start_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_SVTUpdate::~CJBUsrMsg_SVTUpdate() {
  SharedDtor();
}

void CJBUsrMsg_SVTUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CJBUsrMsg_SVTUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_SVTUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_SVTUpdate_descriptor_;
}

const CJBUsrMsg_SVTUpdate& CJBUsrMsg_SVTUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_SVTUpdate* CJBUsrMsg_SVTUpdate::default_instance_ = NULL;

CJBUsrMsg_SVTUpdate* CJBUsrMsg_SVTUpdate::New() const {
  return new CJBUsrMsg_SVTUpdate;
}

void CJBUsrMsg_SVTUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alert_state_ = 0;
    alert_time_remaining_ = 0;
    alert_time_total_ = 0;
    last_alert_state_change_ = 0;
    last_backup_dispatch_ = 0;
    terrorists_on_start_ = 0;
    sneaks_on_start_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_SVTUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 alert_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alert_state_)));
          set_has_alert_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_alert_time_remaining;
        break;
      }

      // optional float alert_time_remaining = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alert_time_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alert_time_remaining_)));
          set_has_alert_time_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alert_time_total;
        break;
      }

      // optional float alert_time_total = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alert_time_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alert_time_total_)));
          set_has_alert_time_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_last_alert_state_change;
        break;
      }

      // optional float last_alert_state_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_last_alert_state_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_alert_state_change_)));
          set_has_last_alert_state_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_last_backup_dispatch;
        break;
      }

      // optional float last_backup_dispatch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_last_backup_dispatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_backup_dispatch_)));
          set_has_last_backup_dispatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_terrorists_on_start;
        break;
      }

      // optional int32 terrorists_on_start = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrorists_on_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terrorists_on_start_)));
          set_has_terrorists_on_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sneaks_on_start;
        break;
      }

      // optional int32 sneaks_on_start = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sneaks_on_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sneaks_on_start_)));
          set_has_sneaks_on_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_SVTUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 alert_state = 1;
  if (has_alert_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alert_state(), output);
  }

  // optional float alert_time_remaining = 2;
  if (has_alert_time_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alert_time_remaining(), output);
  }

  // optional float alert_time_total = 3;
  if (has_alert_time_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alert_time_total(), output);
  }

  // optional float last_alert_state_change = 4;
  if (has_last_alert_state_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->last_alert_state_change(), output);
  }

  // optional float last_backup_dispatch = 5;
  if (has_last_backup_dispatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->last_backup_dispatch(), output);
  }

  // optional int32 terrorists_on_start = 6;
  if (has_terrorists_on_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->terrorists_on_start(), output);
  }

  // optional int32 sneaks_on_start = 7;
  if (has_sneaks_on_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sneaks_on_start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_SVTUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 alert_state = 1;
  if (has_alert_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->alert_state(), target);
  }

  // optional float alert_time_remaining = 2;
  if (has_alert_time_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alert_time_remaining(), target);
  }

  // optional float alert_time_total = 3;
  if (has_alert_time_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alert_time_total(), target);
  }

  // optional float last_alert_state_change = 4;
  if (has_last_alert_state_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->last_alert_state_change(), target);
  }

  // optional float last_backup_dispatch = 5;
  if (has_last_backup_dispatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->last_backup_dispatch(), target);
  }

  // optional int32 terrorists_on_start = 6;
  if (has_terrorists_on_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->terrorists_on_start(), target);
  }

  // optional int32 sneaks_on_start = 7;
  if (has_sneaks_on_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sneaks_on_start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_SVTUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 alert_state = 1;
    if (has_alert_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alert_state());
    }

    // optional float alert_time_remaining = 2;
    if (has_alert_time_remaining()) {
      total_size += 1 + 4;
    }

    // optional float alert_time_total = 3;
    if (has_alert_time_total()) {
      total_size += 1 + 4;
    }

    // optional float last_alert_state_change = 4;
    if (has_last_alert_state_change()) {
      total_size += 1 + 4;
    }

    // optional float last_backup_dispatch = 5;
    if (has_last_backup_dispatch()) {
      total_size += 1 + 4;
    }

    // optional int32 terrorists_on_start = 6;
    if (has_terrorists_on_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terrorists_on_start());
    }

    // optional int32 sneaks_on_start = 7;
    if (has_sneaks_on_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sneaks_on_start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_SVTUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_SVTUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_SVTUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_SVTUpdate::MergeFrom(const CJBUsrMsg_SVTUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert_state()) {
      set_alert_state(from.alert_state());
    }
    if (from.has_alert_time_remaining()) {
      set_alert_time_remaining(from.alert_time_remaining());
    }
    if (from.has_alert_time_total()) {
      set_alert_time_total(from.alert_time_total());
    }
    if (from.has_last_alert_state_change()) {
      set_last_alert_state_change(from.last_alert_state_change());
    }
    if (from.has_last_backup_dispatch()) {
      set_last_backup_dispatch(from.last_backup_dispatch());
    }
    if (from.has_terrorists_on_start()) {
      set_terrorists_on_start(from.terrorists_on_start());
    }
    if (from.has_sneaks_on_start()) {
      set_sneaks_on_start(from.sneaks_on_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_SVTUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_SVTUpdate::CopyFrom(const CJBUsrMsg_SVTUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_SVTUpdate::IsInitialized() const {

  return true;
}

void CJBUsrMsg_SVTUpdate::Swap(CJBUsrMsg_SVTUpdate* other) {
  if (other != this) {
    std::swap(alert_state_, other->alert_state_);
    std::swap(alert_time_remaining_, other->alert_time_remaining_);
    std::swap(alert_time_total_, other->alert_time_total_);
    std::swap(last_alert_state_change_, other->last_alert_state_change_);
    std::swap(last_backup_dispatch_, other->last_backup_dispatch_);
    std::swap(terrorists_on_start_, other->terrorists_on_start_);
    std::swap(sneaks_on_start_, other->sneaks_on_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_SVTUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_SVTUpdate_descriptor_;
  metadata.reflection = CJBUsrMsg_SVTUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CJBUsrMsg_Damage::kVictimIdFieldNumber;
const int CJBUsrMsg_Damage::kAttackerIdFieldNumber;
const int CJBUsrMsg_Damage::kDamageFieldNumber;
const int CJBUsrMsg_Damage::kIsDeadFieldNumber;
const int CJBUsrMsg_Damage::kIsCombatantFieldNumber;
const int CJBUsrMsg_Damage::kDmgBitsFieldNumber;
const int CJBUsrMsg_Damage::kDmgOriginFieldNumber;
const int CJBUsrMsg_Damage::kDmgCustomFieldNumber;
#endif  // !_MSC_VER

CJBUsrMsg_Damage::CJBUsrMsg_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CJBUsrMsg_Damage::InitAsDefaultInstance() {
  dmg_origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CJBUsrMsg_Damage::CJBUsrMsg_Damage(const CJBUsrMsg_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CJBUsrMsg_Damage::SharedCtor() {
  _cached_size_ = 0;
  victim_id_ = 0;
  attacker_id_ = 0;
  damage_ = 0;
  is_dead_ = false;
  is_combatant_ = false;
  dmg_bits_ = 0;
  dmg_origin_ = NULL;
  dmg_custom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CJBUsrMsg_Damage::~CJBUsrMsg_Damage() {
  SharedDtor();
}

void CJBUsrMsg_Damage::SharedDtor() {
  if (this != default_instance_) {
    delete dmg_origin_;
  }
}

void CJBUsrMsg_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CJBUsrMsg_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CJBUsrMsg_Damage_descriptor_;
}

const CJBUsrMsg_Damage& CJBUsrMsg_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CJBUsrMsg_Damage* CJBUsrMsg_Damage::default_instance_ = NULL;

CJBUsrMsg_Damage* CJBUsrMsg_Damage::New() const {
  return new CJBUsrMsg_Damage;
}

void CJBUsrMsg_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    victim_id_ = 0;
    attacker_id_ = 0;
    damage_ = 0;
    is_dead_ = false;
    is_combatant_ = false;
    dmg_bits_ = 0;
    if (has_dmg_origin()) {
      if (dmg_origin_ != NULL) dmg_origin_->::CMsgVector::Clear();
    }
    dmg_custom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CJBUsrMsg_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 victim_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victim_id_)));
          set_has_victim_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attacker_id;
        break;
      }

      // optional int32 attacker_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_id_)));
          set_has_attacker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_damage;
        break;
      }

      // optional float damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_dead;
        break;
      }

      // optional bool is_dead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
          set_has_is_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_combatant;
        break;
      }

      // optional bool is_combatant = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_combatant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_combatant_)));
          set_has_is_combatant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dmg_bits;
        break;
      }

      // optional int32 dmg_bits = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmg_bits_)));
          set_has_dmg_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dmg_origin;
        break;
      }

      // optional .CMsgVector dmg_origin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dmg_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dmg_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dmg_custom;
        break;
      }

      // optional int32 dmg_custom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dmg_custom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmg_custom_)));
          set_has_dmg_custom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CJBUsrMsg_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 victim_id = 1;
  if (has_victim_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->victim_id(), output);
  }

  // optional int32 attacker_id = 2;
  if (has_attacker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attacker_id(), output);
  }

  // optional float damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->damage(), output);
  }

  // optional bool is_dead = 4;
  if (has_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dead(), output);
  }

  // optional bool is_combatant = 5;
  if (has_is_combatant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_combatant(), output);
  }

  // optional int32 dmg_bits = 6;
  if (has_dmg_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dmg_bits(), output);
  }

  // optional .CMsgVector dmg_origin = 7;
  if (has_dmg_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dmg_origin(), output);
  }

  // optional int32 dmg_custom = 8;
  if (has_dmg_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dmg_custom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CJBUsrMsg_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 victim_id = 1;
  if (has_victim_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->victim_id(), target);
  }

  // optional int32 attacker_id = 2;
  if (has_attacker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attacker_id(), target);
  }

  // optional float damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->damage(), target);
  }

  // optional bool is_dead = 4;
  if (has_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dead(), target);
  }

  // optional bool is_combatant = 5;
  if (has_is_combatant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_combatant(), target);
  }

  // optional int32 dmg_bits = 6;
  if (has_dmg_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dmg_bits(), target);
  }

  // optional .CMsgVector dmg_origin = 7;
  if (has_dmg_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dmg_origin(), target);
  }

  // optional int32 dmg_custom = 8;
  if (has_dmg_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dmg_custom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CJBUsrMsg_Damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 victim_id = 1;
    if (has_victim_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victim_id());
    }

    // optional int32 attacker_id = 2;
    if (has_attacker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_id());
    }

    // optional float damage = 3;
    if (has_damage()) {
      total_size += 1 + 4;
    }

    // optional bool is_dead = 4;
    if (has_is_dead()) {
      total_size += 1 + 1;
    }

    // optional bool is_combatant = 5;
    if (has_is_combatant()) {
      total_size += 1 + 1;
    }

    // optional int32 dmg_bits = 6;
    if (has_dmg_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmg_bits());
    }

    // optional .CMsgVector dmg_origin = 7;
    if (has_dmg_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dmg_origin());
    }

    // optional int32 dmg_custom = 8;
    if (has_dmg_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmg_custom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CJBUsrMsg_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CJBUsrMsg_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CJBUsrMsg_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CJBUsrMsg_Damage::MergeFrom(const CJBUsrMsg_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victim_id()) {
      set_victim_id(from.victim_id());
    }
    if (from.has_attacker_id()) {
      set_attacker_id(from.attacker_id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_is_dead()) {
      set_is_dead(from.is_dead());
    }
    if (from.has_is_combatant()) {
      set_is_combatant(from.is_combatant());
    }
    if (from.has_dmg_bits()) {
      set_dmg_bits(from.dmg_bits());
    }
    if (from.has_dmg_origin()) {
      mutable_dmg_origin()->::CMsgVector::MergeFrom(from.dmg_origin());
    }
    if (from.has_dmg_custom()) {
      set_dmg_custom(from.dmg_custom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CJBUsrMsg_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJBUsrMsg_Damage::CopyFrom(const CJBUsrMsg_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJBUsrMsg_Damage::IsInitialized() const {

  return true;
}

void CJBUsrMsg_Damage::Swap(CJBUsrMsg_Damage* other) {
  if (other != this) {
    std::swap(victim_id_, other->victim_id_);
    std::swap(attacker_id_, other->attacker_id_);
    std::swap(damage_, other->damage_);
    std::swap(is_dead_, other->is_dead_);
    std::swap(is_combatant_, other->is_combatant_);
    std::swap(dmg_bits_, other->dmg_bits_);
    std::swap(dmg_origin_, other->dmg_origin_);
    std::swap(dmg_custom_, other->dmg_custom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CJBUsrMsg_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CJBUsrMsg_Damage_descriptor_;
  metadata.reflection = CJBUsrMsg_Damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_ResetHud::kResetFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_ResetHud::CUsrMsg_ResetHud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_ResetHud::InitAsDefaultInstance() {
}

CUsrMsg_ResetHud::CUsrMsg_ResetHud(const CUsrMsg_ResetHud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_ResetHud::SharedCtor() {
  _cached_size_ = 0;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_ResetHud::~CUsrMsg_ResetHud() {
  SharedDtor();
}

void CUsrMsg_ResetHud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_ResetHud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_ResetHud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_ResetHud_descriptor_;
}

const CUsrMsg_ResetHud& CUsrMsg_ResetHud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_ResetHud* CUsrMsg_ResetHud::default_instance_ = NULL;

CUsrMsg_ResetHud* CUsrMsg_ResetHud::New() const {
  return new CUsrMsg_ResetHud;
}

void CUsrMsg_ResetHud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_ResetHud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_ResetHud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool reset = 1;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_ResetHud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool reset = 1;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_ResetHud::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool reset = 1;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_ResetHud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_ResetHud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_ResetHud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_ResetHud::MergeFrom(const CUsrMsg_ResetHud& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_ResetHud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_ResetHud::CopyFrom(const CUsrMsg_ResetHud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_ResetHud::IsInitialized() const {

  return true;
}

void CUsrMsg_ResetHud::Swap(CUsrMsg_ResetHud* other) {
  if (other != this) {
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_ResetHud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_ResetHud_descriptor_;
  metadata.reflection = CUsrMsg_ResetHud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_GameTitle::kDummyFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_GameTitle::CUsrMsg_GameTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_GameTitle::InitAsDefaultInstance() {
}

CUsrMsg_GameTitle::CUsrMsg_GameTitle(const CUsrMsg_GameTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_GameTitle::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_GameTitle::~CUsrMsg_GameTitle() {
  SharedDtor();
}

void CUsrMsg_GameTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_GameTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_GameTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_GameTitle_descriptor_;
}

const CUsrMsg_GameTitle& CUsrMsg_GameTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_GameTitle* CUsrMsg_GameTitle::default_instance_ = NULL;

CUsrMsg_GameTitle* CUsrMsg_GameTitle::New() const {
  return new CUsrMsg_GameTitle;
}

void CUsrMsg_GameTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_GameTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_GameTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_GameTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_GameTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_GameTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_GameTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_GameTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_GameTitle::MergeFrom(const CUsrMsg_GameTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_GameTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_GameTitle::CopyFrom(const CUsrMsg_GameTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_GameTitle::IsInitialized() const {

  return true;
}

void CUsrMsg_GameTitle::Swap(CUsrMsg_GameTitle* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_GameTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_GameTitle_descriptor_;
  metadata.reflection = CUsrMsg_GameTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_RequestState::kDummyFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_RequestState::CUsrMsg_RequestState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_RequestState::InitAsDefaultInstance() {
}

CUsrMsg_RequestState::CUsrMsg_RequestState(const CUsrMsg_RequestState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_RequestState::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_RequestState::~CUsrMsg_RequestState() {
  SharedDtor();
}

void CUsrMsg_RequestState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_RequestState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_RequestState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_RequestState_descriptor_;
}

const CUsrMsg_RequestState& CUsrMsg_RequestState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_RequestState* CUsrMsg_RequestState::default_instance_ = NULL;

CUsrMsg_RequestState* CUsrMsg_RequestState::New() const {
  return new CUsrMsg_RequestState;
}

void CUsrMsg_RequestState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_RequestState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_RequestState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_RequestState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_RequestState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_RequestState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_RequestState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_RequestState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_RequestState::MergeFrom(const CUsrMsg_RequestState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_RequestState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_RequestState::CopyFrom(const CUsrMsg_RequestState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_RequestState::IsInitialized() const {

  return true;
}

void CUsrMsg_RequestState::Swap(CUsrMsg_RequestState* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_RequestState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_RequestState_descriptor_;
  metadata.reflection = CUsrMsg_RequestState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUsrMsg_ClientInfo::kDummyFieldNumber;
#endif  // !_MSC_VER

CUsrMsg_ClientInfo::CUsrMsg_ClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUsrMsg_ClientInfo::InitAsDefaultInstance() {
}

CUsrMsg_ClientInfo::CUsrMsg_ClientInfo(const CUsrMsg_ClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUsrMsg_ClientInfo::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUsrMsg_ClientInfo::~CUsrMsg_ClientInfo() {
  SharedDtor();
}

void CUsrMsg_ClientInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUsrMsg_ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUsrMsg_ClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUsrMsg_ClientInfo_descriptor_;
}

const CUsrMsg_ClientInfo& CUsrMsg_ClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jb_5fusermessages_2eproto();
  return *default_instance_;
}

CUsrMsg_ClientInfo* CUsrMsg_ClientInfo::default_instance_ = NULL;

CUsrMsg_ClientInfo* CUsrMsg_ClientInfo::New() const {
  return new CUsrMsg_ClientInfo;
}

void CUsrMsg_ClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUsrMsg_ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUsrMsg_ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUsrMsg_ClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUsrMsg_ClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUsrMsg_ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUsrMsg_ClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUsrMsg_ClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUsrMsg_ClientInfo::MergeFrom(const CUsrMsg_ClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUsrMsg_ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUsrMsg_ClientInfo::CopyFrom(const CUsrMsg_ClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUsrMsg_ClientInfo::IsInitialized() const {

  return true;
}

void CUsrMsg_ClientInfo::Swap(CUsrMsg_ClientInfo* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUsrMsg_ClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUsrMsg_ClientInfo_descriptor_;
  metadata.reflection = CUsrMsg_ClientInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
