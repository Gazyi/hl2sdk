// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usercmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "usercmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CBaseUserCmdPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CBaseUserCmdPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserCmdPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserCmdPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_usercmd_2eproto() {
  protobuf_AddDesc_usercmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "usercmd.proto");
  GOOGLE_CHECK(file != NULL);
  CBaseUserCmdPB_descriptor_ = file->message_type(0);
  static const int CBaseUserCmdPB_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, command_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, tick_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, viewangles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, aimdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, forwardmove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, leftmove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, sidemove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, upmove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, buttons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, impulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, weaponselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, weaponsubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, mousedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, mousedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, hasbeenpredicted_),
  };
  CBaseUserCmdPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CBaseUserCmdPB_descriptor_,
      CBaseUserCmdPB::default_instance_,
      CBaseUserCmdPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBaseUserCmdPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CBaseUserCmdPB));
  CUserCmdPB_descriptor_ = file->message_type(1);
  static const int CUserCmdPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCmdPB, base_),
  };
  CUserCmdPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserCmdPB_descriptor_,
      CUserCmdPB::default_instance_,
      CUserCmdPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCmdPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserCmdPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserCmdPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_usercmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CBaseUserCmdPB_descriptor_, &CBaseUserCmdPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserCmdPB_descriptor_, &CUserCmdPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_usercmd_2eproto() {
  delete CBaseUserCmdPB::default_instance_;
  delete CBaseUserCmdPB_reflection_;
  delete CUserCmdPB::default_instance_;
  delete CUserCmdPB_reflection_;
}

void protobuf_AddDesc_usercmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_networkbasetypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rusercmd.proto\032\026networkbasetypes.proto\""
    "\351\002\n\016CBaseUserCmdPB\022\026\n\016command_number\030\001 \001"
    "(\005\022\022\n\ntick_count\030\002 \001(\005\022\037\n\nviewangles\030\003 \001"
    "(\0132\013.CMsgQAngle\022!\n\014aimdirection\030\004 \001(\0132\013."
    "CMsgVector\022\023\n\013forwardmove\030\005 \001(\002\022\020\n\010leftm"
    "ove\030\006 \001(\002\022\020\n\010sidemove\030\007 \001(\002\022\016\n\006upmove\030\010 "
    "\001(\002\022\017\n\007buttons\030\t \001(\005\022\017\n\007impulse\030\n \001(\005\022\024\n"
    "\014weaponselect\030\013 \001(\005\022\025\n\rweaponsubtype\030\014 \001"
    "(\005\022\023\n\013random_seed\030\r \001(\005\022\017\n\007mousedx\030\016 \001(\005"
    "\022\017\n\007mousedy\030\017 \001(\005\022\030\n\020hasbeenpredicted\030\020 "
    "\001(\010\"+\n\nCUserCmdPB\022\035\n\004base\030\001 \001(\0132\017.CBaseU"
    "serCmdPBB\005H\001\200\001\000", 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "usercmd.proto", &protobuf_RegisterTypes);
  CBaseUserCmdPB::default_instance_ = new CBaseUserCmdPB();
  CUserCmdPB::default_instance_ = new CUserCmdPB();
  CBaseUserCmdPB::default_instance_->InitAsDefaultInstance();
  CUserCmdPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_usercmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_usercmd_2eproto {
  StaticDescriptorInitializer_usercmd_2eproto() {
    protobuf_AddDesc_usercmd_2eproto();
  }
} static_descriptor_initializer_usercmd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CBaseUserCmdPB::kCommandNumberFieldNumber;
const int CBaseUserCmdPB::kTickCountFieldNumber;
const int CBaseUserCmdPB::kViewanglesFieldNumber;
const int CBaseUserCmdPB::kAimdirectionFieldNumber;
const int CBaseUserCmdPB::kForwardmoveFieldNumber;
const int CBaseUserCmdPB::kLeftmoveFieldNumber;
const int CBaseUserCmdPB::kSidemoveFieldNumber;
const int CBaseUserCmdPB::kUpmoveFieldNumber;
const int CBaseUserCmdPB::kButtonsFieldNumber;
const int CBaseUserCmdPB::kImpulseFieldNumber;
const int CBaseUserCmdPB::kWeaponselectFieldNumber;
const int CBaseUserCmdPB::kWeaponsubtypeFieldNumber;
const int CBaseUserCmdPB::kRandomSeedFieldNumber;
const int CBaseUserCmdPB::kMousedxFieldNumber;
const int CBaseUserCmdPB::kMousedyFieldNumber;
const int CBaseUserCmdPB::kHasbeenpredictedFieldNumber;
#endif  // !_MSC_VER

CBaseUserCmdPB::CBaseUserCmdPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CBaseUserCmdPB::InitAsDefaultInstance() {
  viewangles_ = const_cast< ::CMsgQAngle*>(&::CMsgQAngle::default_instance());
  aimdirection_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CBaseUserCmdPB::CBaseUserCmdPB(const CBaseUserCmdPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CBaseUserCmdPB::SharedCtor() {
  _cached_size_ = 0;
  command_number_ = 0;
  tick_count_ = 0;
  viewangles_ = NULL;
  aimdirection_ = NULL;
  forwardmove_ = 0;
  leftmove_ = 0;
  sidemove_ = 0;
  upmove_ = 0;
  buttons_ = 0;
  impulse_ = 0;
  weaponselect_ = 0;
  weaponsubtype_ = 0;
  random_seed_ = 0;
  mousedx_ = 0;
  mousedy_ = 0;
  hasbeenpredicted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CBaseUserCmdPB::~CBaseUserCmdPB() {
  SharedDtor();
}

void CBaseUserCmdPB::SharedDtor() {
  if (this != default_instance_) {
    delete viewangles_;
    delete aimdirection_;
  }
}

void CBaseUserCmdPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBaseUserCmdPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CBaseUserCmdPB_descriptor_;
}

const CBaseUserCmdPB& CBaseUserCmdPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usercmd_2eproto();
  return *default_instance_;
}

CBaseUserCmdPB* CBaseUserCmdPB::default_instance_ = NULL;

CBaseUserCmdPB* CBaseUserCmdPB::New() const {
  return new CBaseUserCmdPB;
}

void CBaseUserCmdPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_number_ = 0;
    tick_count_ = 0;
    if (has_viewangles()) {
      if (viewangles_ != NULL) viewangles_->::CMsgQAngle::Clear();
    }
    if (has_aimdirection()) {
      if (aimdirection_ != NULL) aimdirection_->::CMsgVector::Clear();
    }
    forwardmove_ = 0;
    leftmove_ = 0;
    sidemove_ = 0;
    upmove_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buttons_ = 0;
    impulse_ = 0;
    weaponselect_ = 0;
    weaponsubtype_ = 0;
    random_seed_ = 0;
    mousedx_ = 0;
    mousedy_ = 0;
    hasbeenpredicted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CBaseUserCmdPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 command_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_number_)));
          set_has_command_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick_count;
        break;
      }

      // optional int32 tick_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_count_)));
          set_has_tick_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_viewangles;
        break;
      }

      // optional .CMsgQAngle viewangles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_viewangles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewangles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aimdirection;
        break;
      }

      // optional .CMsgVector aimdirection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aimdirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aimdirection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_forwardmove;
        break;
      }

      // optional float forwardmove = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_forwardmove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forwardmove_)));
          set_has_forwardmove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_leftmove;
        break;
      }

      // optional float leftmove = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leftmove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftmove_)));
          set_has_leftmove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_sidemove;
        break;
      }

      // optional float sidemove = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sidemove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sidemove_)));
          set_has_sidemove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_upmove;
        break;
      }

      // optional float upmove = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_upmove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upmove_)));
          set_has_upmove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buttons;
        break;
      }

      // optional int32 buttons = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buttons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttons_)));
          set_has_buttons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_impulse;
        break;
      }

      // optional int32 impulse = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impulse_)));
          set_has_impulse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weaponselect;
        break;
      }

      // optional int32 weaponselect = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponselect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponselect_)));
          set_has_weaponselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_weaponsubtype;
        break;
      }

      // optional int32 weaponsubtype = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponsubtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponsubtype_)));
          set_has_weaponsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_random_seed;
        break;
      }

      // optional int32 random_seed = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mousedx;
        break;
      }

      // optional int32 mousedx = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mousedx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mousedx_)));
          set_has_mousedx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mousedy;
        break;
      }

      // optional int32 mousedy = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mousedy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mousedy_)));
          set_has_mousedy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hasbeenpredicted;
        break;
      }

      // optional bool hasbeenpredicted = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasbeenpredicted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbeenpredicted_)));
          set_has_hasbeenpredicted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CBaseUserCmdPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 command_number = 1;
  if (has_command_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command_number(), output);
  }

  // optional int32 tick_count = 2;
  if (has_tick_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tick_count(), output);
  }

  // optional .CMsgQAngle viewangles = 3;
  if (has_viewangles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->viewangles(), output);
  }

  // optional .CMsgVector aimdirection = 4;
  if (has_aimdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->aimdirection(), output);
  }

  // optional float forwardmove = 5;
  if (has_forwardmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->forwardmove(), output);
  }

  // optional float leftmove = 6;
  if (has_leftmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->leftmove(), output);
  }

  // optional float sidemove = 7;
  if (has_sidemove()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sidemove(), output);
  }

  // optional float upmove = 8;
  if (has_upmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->upmove(), output);
  }

  // optional int32 buttons = 9;
  if (has_buttons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buttons(), output);
  }

  // optional int32 impulse = 10;
  if (has_impulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->impulse(), output);
  }

  // optional int32 weaponselect = 11;
  if (has_weaponselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->weaponselect(), output);
  }

  // optional int32 weaponsubtype = 12;
  if (has_weaponsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->weaponsubtype(), output);
  }

  // optional int32 random_seed = 13;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->random_seed(), output);
  }

  // optional int32 mousedx = 14;
  if (has_mousedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mousedx(), output);
  }

  // optional int32 mousedy = 15;
  if (has_mousedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mousedy(), output);
  }

  // optional bool hasbeenpredicted = 16;
  if (has_hasbeenpredicted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->hasbeenpredicted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CBaseUserCmdPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 command_number = 1;
  if (has_command_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command_number(), target);
  }

  // optional int32 tick_count = 2;
  if (has_tick_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tick_count(), target);
  }

  // optional .CMsgQAngle viewangles = 3;
  if (has_viewangles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->viewangles(), target);
  }

  // optional .CMsgVector aimdirection = 4;
  if (has_aimdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->aimdirection(), target);
  }

  // optional float forwardmove = 5;
  if (has_forwardmove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->forwardmove(), target);
  }

  // optional float leftmove = 6;
  if (has_leftmove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->leftmove(), target);
  }

  // optional float sidemove = 7;
  if (has_sidemove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->sidemove(), target);
  }

  // optional float upmove = 8;
  if (has_upmove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->upmove(), target);
  }

  // optional int32 buttons = 9;
  if (has_buttons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buttons(), target);
  }

  // optional int32 impulse = 10;
  if (has_impulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->impulse(), target);
  }

  // optional int32 weaponselect = 11;
  if (has_weaponselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->weaponselect(), target);
  }

  // optional int32 weaponsubtype = 12;
  if (has_weaponsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->weaponsubtype(), target);
  }

  // optional int32 random_seed = 13;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->random_seed(), target);
  }

  // optional int32 mousedx = 14;
  if (has_mousedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mousedx(), target);
  }

  // optional int32 mousedy = 15;
  if (has_mousedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->mousedy(), target);
  }

  // optional bool hasbeenpredicted = 16;
  if (has_hasbeenpredicted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->hasbeenpredicted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CBaseUserCmdPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 command_number = 1;
    if (has_command_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command_number());
    }

    // optional int32 tick_count = 2;
    if (has_tick_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_count());
    }

    // optional .CMsgQAngle viewangles = 3;
    if (has_viewangles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viewangles());
    }

    // optional .CMsgVector aimdirection = 4;
    if (has_aimdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aimdirection());
    }

    // optional float forwardmove = 5;
    if (has_forwardmove()) {
      total_size += 1 + 4;
    }

    // optional float leftmove = 6;
    if (has_leftmove()) {
      total_size += 1 + 4;
    }

    // optional float sidemove = 7;
    if (has_sidemove()) {
      total_size += 1 + 4;
    }

    // optional float upmove = 8;
    if (has_upmove()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 buttons = 9;
    if (has_buttons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buttons());
    }

    // optional int32 impulse = 10;
    if (has_impulse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->impulse());
    }

    // optional int32 weaponselect = 11;
    if (has_weaponselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponselect());
    }

    // optional int32 weaponsubtype = 12;
    if (has_weaponsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponsubtype());
    }

    // optional int32 random_seed = 13;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional int32 mousedx = 14;
    if (has_mousedx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mousedx());
    }

    // optional int32 mousedy = 15;
    if (has_mousedy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mousedy());
    }

    // optional bool hasbeenpredicted = 16;
    if (has_hasbeenpredicted()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBaseUserCmdPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CBaseUserCmdPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CBaseUserCmdPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CBaseUserCmdPB::MergeFrom(const CBaseUserCmdPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_number()) {
      set_command_number(from.command_number());
    }
    if (from.has_tick_count()) {
      set_tick_count(from.tick_count());
    }
    if (from.has_viewangles()) {
      mutable_viewangles()->::CMsgQAngle::MergeFrom(from.viewangles());
    }
    if (from.has_aimdirection()) {
      mutable_aimdirection()->::CMsgVector::MergeFrom(from.aimdirection());
    }
    if (from.has_forwardmove()) {
      set_forwardmove(from.forwardmove());
    }
    if (from.has_leftmove()) {
      set_leftmove(from.leftmove());
    }
    if (from.has_sidemove()) {
      set_sidemove(from.sidemove());
    }
    if (from.has_upmove()) {
      set_upmove(from.upmove());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buttons()) {
      set_buttons(from.buttons());
    }
    if (from.has_impulse()) {
      set_impulse(from.impulse());
    }
    if (from.has_weaponselect()) {
      set_weaponselect(from.weaponselect());
    }
    if (from.has_weaponsubtype()) {
      set_weaponsubtype(from.weaponsubtype());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_mousedx()) {
      set_mousedx(from.mousedx());
    }
    if (from.has_mousedy()) {
      set_mousedy(from.mousedy());
    }
    if (from.has_hasbeenpredicted()) {
      set_hasbeenpredicted(from.hasbeenpredicted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CBaseUserCmdPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBaseUserCmdPB::CopyFrom(const CBaseUserCmdPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBaseUserCmdPB::IsInitialized() const {

  return true;
}

void CBaseUserCmdPB::Swap(CBaseUserCmdPB* other) {
  if (other != this) {
    std::swap(command_number_, other->command_number_);
    std::swap(tick_count_, other->tick_count_);
    std::swap(viewangles_, other->viewangles_);
    std::swap(aimdirection_, other->aimdirection_);
    std::swap(forwardmove_, other->forwardmove_);
    std::swap(leftmove_, other->leftmove_);
    std::swap(sidemove_, other->sidemove_);
    std::swap(upmove_, other->upmove_);
    std::swap(buttons_, other->buttons_);
    std::swap(impulse_, other->impulse_);
    std::swap(weaponselect_, other->weaponselect_);
    std::swap(weaponsubtype_, other->weaponsubtype_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(mousedx_, other->mousedx_);
    std::swap(mousedy_, other->mousedy_);
    std::swap(hasbeenpredicted_, other->hasbeenpredicted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CBaseUserCmdPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CBaseUserCmdPB_descriptor_;
  metadata.reflection = CBaseUserCmdPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserCmdPB::kBaseFieldNumber;
#endif  // !_MSC_VER

CUserCmdPB::CUserCmdPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserCmdPB::InitAsDefaultInstance() {
  base_ = const_cast< ::CBaseUserCmdPB*>(&::CBaseUserCmdPB::default_instance());
}

CUserCmdPB::CUserCmdPB(const CUserCmdPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserCmdPB::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserCmdPB::~CUserCmdPB() {
  SharedDtor();
}

void CUserCmdPB::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void CUserCmdPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserCmdPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserCmdPB_descriptor_;
}

const CUserCmdPB& CUserCmdPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usercmd_2eproto();
  return *default_instance_;
}

CUserCmdPB* CUserCmdPB::default_instance_ = NULL;

CUserCmdPB* CUserCmdPB::New() const {
  return new CUserCmdPB;
}

void CUserCmdPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::CBaseUserCmdPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserCmdPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CBaseUserCmdPB base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserCmdPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CBaseUserCmdPB base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserCmdPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CBaseUserCmdPB base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserCmdPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CBaseUserCmdPB base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserCmdPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserCmdPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserCmdPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserCmdPB::MergeFrom(const CUserCmdPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CBaseUserCmdPB::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserCmdPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserCmdPB::CopyFrom(const CUserCmdPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserCmdPB::IsInitialized() const {

  return true;
}

void CUserCmdPB::Swap(CUserCmdPB* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserCmdPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserCmdPB_descriptor_;
  metadata.reflection = CUserCmdPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
